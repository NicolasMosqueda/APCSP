{
  
    
        "post0": {
            "title": "Unit 3 Section 5-7",
            "content": "Unit 3 Notes . Section 5 . Learning Objective: For relationships between two variables expressions or values- write expressions using relational operators . Essential Knowledge: -A Boolean Value is either true or false -The exam reference sheet provides the following relational operators:=,≠,&gt;,&lt;,≥, and≤. These are used to test the relationship between two variables, expressions, or values. A comparison using a relational operator evaluates to a Boolean value. For example, a=b evaluates to true if a and ba are equal otherwise it evaluates to false . Learning Objective: Represent a step-by-step algorithmic process using sequential code statements . Essential Knowledge: -Sequencing is the application of each step of an algorithm in the order in which the code statements are given -A code statement is a part of program code that expresses an action to be carried out -A expression can consist of a value, a variable, an operator, or a procedure call that returns a value -Expressions are evaluated to produce a single value -The evaluation of expressions follows a set order of operation defined by the programming language -Sequential statements execute in the order they appear in the code segment -Clarity and readability are important considerations when expressing an algorithm in a programming language . Learning Objective: Evaluate expressions that use arithmetic operators . Essential Knowledge: . -Arithmetic operators are part of most programming languages and include addition, subtraction, multiplication, division, and modulus operators -The exam reference sheet provides a MOD b, which evaluates to the remainder when a is divide by b. Assume that a is an integer greater than or equal to 0 and b is an integer greater than 0. For example, 17 MOD 5 evaluates to 2 -The order of operations used in mathematics applies when evaluating expressions. The MOD operator has the same precedence as the * and / operators . Section 6 . Learning Objective: Express an algorithm that uses selection without using a programming language . Essential Knowledge: -Selection determines which part of an algorithm are executed based on a condition being true or false . Learning Objective: For selection-a.write conditional statements, b.determine the result of conditional statements . Essential Knowledge: -Conditional statements, or “if-statements,” affect the sequential flow of control by executing different statements based on the value of a Boolean expression . Section 7 . Learning Objective:For nested selection-a. Write nested conditional statements, b.determine the result of nested conditional statements . Essential Knowledge: -nested conditional statements consist of conditional statements within conditional statements . Brainstorming Hacks . Create a step-by-step algorithmic process using sequential code statements and evaluate | Write a nested conditonal statement and determine the result of the statements | .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%2013/2022/11/17/Unit3-section5-7.html",
            "relUrl": "/week%2013/2022/11/17/Unit3-section5-7.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Final Blog",
            "content": "Final Score . . Question 14 . . When answering the question I slected 7 as an answer becasue I did not realize that the first line of code says that numcorrect is greater than 7 and I interpreted as greater or equal to 7. I now know that a 7 would result in a check which is correct. The answer 6 is correct because since it is less than 7 the code will display a check which is not correct as it shoud display a check minus. . Question 20 . . I was very confused on this question so I just assumed that 4 bits were not enoguh to store 8 directions. I know realize that 4 bit can represent 2 to the fourth which equal to 16 pieces of information and therefore it is not neccesary to add extra bits since 4 bits is enough to store the eight directions . Question 28 . . When answering this question I was not being careful. The answer I chose would make the first 25 units have a cost of $7 and units after that have a price of $5. It should be the other way around so 25 should be multiplied by 5 and the (numUnits-25) should be multiplied by 7. This would make option C the correct answer . Question 35 . . I selected B in this question becasue I did not know that the maxPS&lt;-50 line takes priority over the previous box of code and sets maxPS to 50 regardless of the value of time. Option A is correct because it has the maxPS&lt;-50 in the beginning which sets maxPS to 50 by default. Then after it states that if time is greater than 120 then maxPS is 30 . Question 41 . . When I answered the question I thought it was just a simple question where collegeboard was trying to trick me with all the code segments. I saw the thrid code segment which assigned 30 to r so I answered option C which was 30. I now understand that the 5th line gives p the value of q which is 20 and then the 8th code segment gives r the value of p, so therefore vale of r is 20 and option B is correct. . Question 45 . . I was confused on this question becasue I saw that count1 was value in the list that are greater than 0 which there are 2 numbers, I then added the plus 1 to get count1=3 so i slected that answer. I now understand that count1 is just number of positve values in the list which is 2 and count2 is all the other the other values in which there are 3 other number. Therefore, count1=2 and count2=3 so option b is correct . Overall Thoughts . I found the quiz to be very informative of what we should have learned throughout this trimester. At first many of the questions seemed very dificult but as I read through all the code very slowly I was able to better understand the uestion and realize the question was not as hard as I orginaly thought. I think that I performed quite well on this test but I still have lots of learning to do. . Night at the Mueseum . I enjoyed showing our project to different parents and students. We made a searchbar where the user could search any marvel movie or comic and a link to the marvel website would come up using an api. I was very happy that are searchbars was working during the presentations as we had lots of struggles making it. It was very cool to see other groups’ projects. There were a few that I really liked such as a website that gave a fitness plan based on your height and weight along with fitness goals. . Collegeboard Notes . 1.1-1.3 4.1 .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%2012/2022/11/08/Final-Blog.html",
            "relUrl": "/week%2012/2022/11/08/Final-Blog.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "AP Classroom 4.1",
            "content": "AP Classroom 4.1 Notes . Learning Objective: Explain how computing devices work tgether in a network . -a computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors . -a computing system is a group of computing devices and programs working together for a common purpose . -a computer network is a group of interconnected computing device capable of sending or recieving data . -a computer network is a type of computing system . -a path between two computing devices on a computer network is a sequence of directly connected computing devices that begins at the sender and ends at the receiver . -routing is the process of finding a path from the sender to receiver . -the bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time . -bandwidth is usually measured in bits per second . Learning Objective:Explain how the internet works, explain how data are sent through the internet via packets, describe the differences between the Internet and thwe World Wide Web . -the internet is a computer network consisting of interconnected networks that use standardized, open communication protocols . -access to the internet depends on the ability to connect a computing device to an internet connected device . -a protocol is an agreed upon set of rules that specify the behavior of a system . -the protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet . -routing on the internet is usually dynamic, it is not specified in advance . -the scalability of a system is the cappacity for the sytem to change in size and scale to meet new demands . -the internet was designed to be scalable .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%209/2022/10/17/CB-4.1-Notes.html",
            "relUrl": "/week%209/2022/10/17/CB-4.1-Notes.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "AP Classroom 1.4",
            "content": "College Board Quiz . . Question Answered Incorrectly . . Correction . For this problem I answered [-3, -2, -1] which was the incorrect answer. The correct asnwer is [-1, 0, 1]. The reason why is the computer flips the sign of all the integers until they are all positive. For the answer I chose, all the negative numbers are negative so when the sign is flipped they all become positve so the procedure is able to work. [-1, 0, 1] does not work since there is both a negative numer and positive number so matter how may times you flip the signs one of the numbers will always be negative. Therefore, the procedure will not produce the intended result. . Notes . Learning Objective 1: For errors in an algorith or program: identify an error . -a logic error is a mistake in the algorithm or program that casues it to behave incorrectly or unexpectedly . -a syntax error is a mistake in the program where the rules of the programming language are not followed . -a run time error is a mistake in the program that occurs during the executiom of the program. Programming language define their own runtime errors . -A overflow error is an error that occurs when a computer attempts to handle a number that is outside of the defined range of values . Learning Objective 2: For errors in an algorithm or program: correct the error . -The following are effective ways to find and correct errors: tests cases, hand tracing, visualizations, debuggers, adding extra output statements . Learning Objective 3: Identify inputs and corresponding expected outputs or behaviors that can be used to check the correctness of an algorithm or program . -In the development process, testing uses defined inputs to ensure that an algorithm or program is producing the expected outcomes. Programmers use the results from testing to revise their algorithms or programs . -Defined inputs used to test a program should demonstrate the different expected outcomes that are at or just beyond the extremes of input data . -Program requirements are needed to identify appropriate defined inpputs for testing .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%207/2022/10/09/Collegeboard-1.4.html",
            "relUrl": "/week%207/2022/10/09/Collegeboard-1.4.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Project Planning CollegeBoard Requirements",
            "content": "Project Idea . Our Group is planning on making an interactive escape room game. We want the the user to be faced with several different actions to choose from. Each action will result in a different result. Certain results will produce more preferrable outcomes that will get the user closer to escaping the room. After series of different scenarios, the user will be informed on whether they the right decisions and successfully made it out of the escape room or if they are still trapped, in which they will be promted to play again . Row 1: Program Purpose and Function . In order to earn this point, our group will take screenshots of the code and provide in depth explanations of how the code works and explain our thinking behind it. This will be seperate from the game itself as we want it to be visually pleasing without code obstructing the experience for the user. . Point 2: Data Abstraction . We will be sure to include two program segments like stated int he rubric. Furthermore, one of the segments will show how data is stored in a list, and the other will show how the same data is used to complete the purpose of the program . Point 3: Managing Complexity . Our group will spend extensive time on this project to make sure it is as advanced as possible. We will incorporate all the unique tricks we have learned throughout this trimester to demonstrate our learning. We will also write a detailed explanation of our code showing that we actually understand the code rather than just being able to write it. . Point 4: Procedural Abstraction . As stated in the rubric, we will have 2 program code segments that fulfill different requirements. One shwoing a student developed procedure with a parameter that has an effect on the functionality of the procedure. The other will show where the student-developed procedure is being called . Point 5: Algorithm Implementation . We will incorporate sequencing, selection, and iterations, into our project code. This will display our diverse knowledge in coding. We will give a thorough explanation that will be easily understable for our grader. . Point 6: Testing . We will describe the conditions being tetsed by each call to the procedure. Additionally, we will identify the result of each call. Our conditions will use parameters to exectue different code segments and execute/bypass code segements .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%207/2022/10/09/CB-Project-Requirements.html",
            "relUrl": "/week%207/2022/10/09/CB-Project-Requirements.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;df8fd83b8dmsh92c06c5d89786f9p1e38c2jsn438e54c0af45&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://mcu-comics-and-characters.p.rapidapi.com/mcu/comics&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;df8fd83b8dmsh92c06c5d89786f9p1e38c2jsn438e54c0af45&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;mcu-comics-and-characters.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . [{&#39;title&#39;: &#39;File:85F11A8E-6503-4B71-B65C-B67E3EF50378.jpeg&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/File:85F11A8E-6503-4B71-B65C-B67E3EF50378.jpeg&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Agents of S.H.I.E.L.D.: The Chase&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Agents_of_S.H.I.E.L.D.:_The_Chase&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Ant-Man - Scott Lang: Small Time&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Ant-Man_-_Scott_Lang:_Small_Time&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Ant-Man and the Wasp Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Ant-Man_and_the_Wasp_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Ant-Man Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Ant-Man_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Ant-Man: Larger Than Life&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Ant-Man:_Larger_Than_Life&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#34;Avengers: Age of Ultron Prelude - This Scepter&#39;d Isle&#34;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Avengers:_Age_of_Ultron_Prelude_-_This_Scepter%27d_Isle&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Avengers: Age of Ultron: Episode 0&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Avengers:_Age_of_Ultron:_Episode_0&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Avengers: Endgame Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Avengers:_Endgame_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Avengers: Infinity War Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Avengers:_Infinity_War_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Avengers: Operation HYDRA&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Avengers:_Operation_HYDRA&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Black Panther Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Black_Panther_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Black Widow Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Black_Widow_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America &amp; Thor: Avengers!&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America_%26_Thor:_Avengers!&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America: Civil War Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America:_Civil_War_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America: Civil War Prelude Infinite Comic&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America:_Civil_War_Prelude_Infinite_Comic&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America: Evil Lurks Everywhere&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America:_Evil_Lurks_Everywhere&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America: First Vengeance&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America:_First_Vengeance&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America: Homecoming&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America:_Homecoming&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America: Road to War&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America:_Road_to_War&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America: The First Avenger Adaptation&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America:_The_First_Avenger_Adaptation&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain America: The Winter Soldier Infinite Comic&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_America:_The_Winter_Soldier_Infinite_Comic&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Captain Marvel Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Captain_Marvel_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Doctor Strange Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Doctor_Strange_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Doctor Strange Prelude - The Zealot&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Doctor_Strange_Prelude_-_The_Zealot&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Doctor Strange: Episode 0&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Doctor_Strange:_Episode_0&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Doctor Strange: Mystic Apprentice&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Doctor_Strange:_Mystic_Apprentice&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Eternals: The 500 Year War&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Eternals:_The_500_Year_War&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Guardians of the Galaxy Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Guardians_of_the_Galaxy_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Guardians of the Galaxy Prequel Infinite Comic&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Guardians_of_the_Galaxy_Prequel_Infinite_Comic&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Guardians of the Galaxy Vol. 2 Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Guardians_of_the_Galaxy_Vol._2_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#34;Guardians of the Galaxy: Galaxy&#39;s Most Wanted&#34;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Guardians_of_the_Galaxy:_Galaxy%27s_Most_Wanted&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man 2 Adaptation&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_2_Adaptation&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man 2: Black Widow: Agent of S.H.I.E.L.D.&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_2:_Black_Widow:_Agent_of_S.H.I.E.L.D.&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man 2: Fist of Iron&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_2:_Fist_of_Iron&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man 2: Nick Fury: Director of S.H.I.E.L.D.&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_2:_Nick_Fury:_Director_of_S.H.I.E.L.D.&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man 2: Phil Coulson: Agent of S.H.I.E.L.D.&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_2:_Phil_Coulson:_Agent_of_S.H.I.E.L.D.&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man 2: Public Identity&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_2:_Public_Identity&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man 2: Security Breach&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_2:_Security_Breach&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man 3 Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_3_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man Royal Purple Custom Comic&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man_Royal_Purple_Custom_Comic&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man: Fast Friends&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man:_Fast_Friends&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man: I Am Iron Man!&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man:_I_Am_Iron_Man!&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man: Limited Edition&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man:_Limited_Edition&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man: Security Measures&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man:_Security_Measures&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man: The Coming of the Melter&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man:_The_Coming_of_the_Melter&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man: The Price of Doing Business&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man:_The_Price_of_Doing_Business&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Iron Man: Will Online Evils Prevail?&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Iron_Man:_Will_Online_Evils_Prevail%3F&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Jessica Jones (comic)&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Jessica_Jones_(comic)&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;List of Multiverse Comics&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/List_of_Multiverse_Comics&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Nick Fury: Spies Like Us&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Nick_Fury:_Spies_Like_Us&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Spider-Man: Far From Home - Got To Hand it To Him&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Spider-Man:_Far_From_Home_-_Got_To_Hand_it_To_Him&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#34;Spider-Man: Far From Home - Them&#39;s The Brakes&#34;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Spider-Man:_Far_From_Home_-_Them%27s_The_Brakes&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Spider-Man: Far From Home Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Spider-Man:_Far_From_Home_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Spider-Man: Homecoming Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Spider-Man:_Homecoming_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Spider-Man: Homecoming: Fight or Flight&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Spider-Man:_Homecoming:_Fight_or_Flight&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Spider-Man: Homecoming: Morning Rush&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Spider-Man:_Homecoming:_Morning_Rush&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Spider-Man: Homecoming: School of Shock&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Spider-Man:_Homecoming:_School_of_Shock&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;The Avengers Adaptation&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/The_Avengers_Adaptation&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;The Avengers Prelude: Black Widow Strikes&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/The_Avengers_Prelude:_Black_Widow_Strikes&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#34;The Avengers Prelude: Fury&#39;s Big Week&#34;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/The_Avengers_Prelude:_Fury%27s_Big_Week&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;The Avengers: Iron Man Mark VII&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/The_Avengers:_Iron_Man_Mark_VII&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;The Avengers: The Avengers Initiative&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/The_Avengers:_The_Avengers_Initiative&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;The Incredible Hulk: The Big Picture&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/The_Incredible_Hulk:_The_Big_Picture&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;The Incredible Hulk: The Fury Files&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/The_Incredible_Hulk:_The_Fury_Files&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Thor Adaptation&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Thor_Adaptation&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Thor, The Mighty Avenger&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Thor,_The_Mighty_Avenger&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Thor: Crown of Fools&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Thor:_Crown_of_Fools&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Thor: Ragnarok Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Thor:_Ragnarok_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Thor: Rescue&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Thor:_Rescue&#39;, &#39;source&#39;: &#39;fandom&#39;}, {&#39;title&#39;: &#39;Thor: The Dark World Prelude&#39;, &#39;link&#39;: &#39;https://marvelcinematicuniverse.fandom.com/wiki/Thor:_The_Dark_World_Prelude&#39;, &#39;source&#39;: &#39;fandom&#39;}] . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;df8fd83b8dmsh92c06c5d89786f9p1e38c2jsn438e54c0af45&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#39;status&#39;: &#39;success&#39;, &#39;data&#39;: {&#39;stats&#39;: {&#39;total&#39;: 1482, &#39;totalCoins&#39;: 21332, &#39;totalMarkets&#39;: 31404, &#39;totalExchanges&#39;: 170, &#39;totalMarketCap&#39;: &#39;940322280686&#39;, &#39;total24hVolume&#39;: &#39;43559675637&#39;}, &#39;coins&#39;: [{&#39;uuid&#39;: &#39;Qwsogvtv82FCd&#39;, &#39;symbol&#39;: &#39;BTC&#39;, &#39;name&#39;: &#39;Bitcoin&#39;, &#39;color&#39;: &#39;#f7931A&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#39;, &#39;marketCap&#39;: &#39;369459599266&#39;, &#39;price&#39;: &#39;19261.25952935943&#39;, &#39;listedAt&#39;: 1330214400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.71&#39;, &#39;rank&#39;: 1, &#39;sparkline&#39;: [&#39;19118.618429060065&#39;, &#39;19152.047979070794&#39;, &#39;19226.531315768574&#39;, &#39;19272.6811610052&#39;, &#39;19247.768489086793&#39;, &#39;19168.224307833636&#39;, &#39;19208.48695100609&#39;, &#39;19223.148248544145&#39;, &#39;19253.014607516983&#39;, &#39;19238.6801310188&#39;, &#39;19278.68924064656&#39;, &#39;19257.400846939177&#39;, &#39;19173.841389057885&#39;, &#39;19190.27372217103&#39;, &#39;19292.464835812232&#39;, &#39;19288.63721567692&#39;, &#39;19260.120136779893&#39;, &#39;19279.867354615144&#39;, &#39;19270.968017402833&#39;, &#39;19232.256911772594&#39;, &#39;19208.314788593623&#39;, &#39;19242.590168491886&#39;, &#39;19239.485714274895&#39;, &#39;19227.39771935387&#39;, &#39;19243.93656058023&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#39;, &#39;24hVolume&#39;: &#39;21364422732&#39;, &#39;btcPrice&#39;: &#39;1&#39;}, {&#39;uuid&#39;: &#39;razxDUgYGNAdQ&#39;, &#39;symbol&#39;: &#39;ETH&#39;, &#39;name&#39;: &#39;Ethereum&#39;, &#39;color&#39;: &#39;#3C3C3D&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#39;, &#39;marketCap&#39;: &#39;159397827708&#39;, &#39;price&#39;: &#39;1306.4486927975051&#39;, &#39;listedAt&#39;: 1438905600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.81&#39;, &#39;rank&#39;: 2, &#39;sparkline&#39;: [&#39;1282.3602842286311&#39;, &#39;1284.7589641680818&#39;, &#39;1290.2050926781308&#39;, &#39;1293.4737882153256&#39;, &#39;1290.9091791480116&#39;, &#39;1284.3198373319278&#39;, &#39;1287.2731628627234&#39;, &#39;1288.1076946284347&#39;, &#39;1290.9214207910436&#39;, &#39;1290.9050892136795&#39;, &#39;1293.2621294641094&#39;, &#39;1291.3164138138325&#39;, &#39;1286.3860097427723&#39;, &#39;1287.7481089599557&#39;, &#39;1304.1596084025905&#39;, &#39;1308.388596870348&#39;, &#39;1304.471855175519&#39;, &#39;1306.7193627261515&#39;, &#39;1305.9018731709803&#39;, &#39;1302.8757629080892&#39;, &#39;1302.4813199431971&#39;, &#39;1302.480015087592&#39;, &#39;1301.7369923197114&#39;, &#39;1304.2465895165728&#39;, &#39;1306.1216393945492&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#39;, &#39;24hVolume&#39;: &#39;7964496320&#39;, &#39;btcPrice&#39;: &#39;0.06782779136567471&#39;}, {&#39;uuid&#39;: &#39;HIVsRcGKkPFtW&#39;, &#39;symbol&#39;: &#39;USDT&#39;, &#39;name&#39;: &#39;Tether USD&#39;, &#39;color&#39;: &#39;#22a079&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#39;, &#39;marketCap&#39;: &#39;68387816459&#39;, &#39;price&#39;: &#39;0.9993461687488656&#39;, &#39;listedAt&#39;: 1420761600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.02&#39;, &#39;rank&#39;: 3, &#39;sparkline&#39;: [&#39;0.9993395684804814&#39;, &#39;1.0010839276724635&#39;, &#39;1.0038045876368618&#39;, &#39;1.0064267556404842&#39;, &#39;1.005933628861618&#39;, &#39;1.001843808665762&#39;, &#39;1.0041373497497617&#39;, &#39;1.0048499669304767&#39;, &#39;1.00677938704011&#39;, &#39;1.0047969081661852&#39;, &#39;1.0072480128361676&#39;, &#39;1.0059582056306209&#39;, &#39;1.0023058271419099&#39;, &#39;1.0016350285739273&#39;, &#39;0.9986401425656025&#39;, &#39;0.9982867482386613&#39;, &#39;1.0004885152119514&#39;, &#39;0.9991828923840009&#39;, &#39;1.000323932773643&#39;, &#39;1.0003769655554222&#39;, &#39;1.0001860177071658&#39;, &#39;1.0024294704128083&#39;, &#39;1.0029894575922955&#39;, &#39;1.001917899277715&#39;, &#39;1.0002261347763826&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#39;, &#39;24hVolume&#39;: &#39;28169116671&#39;, &#39;btcPrice&#39;: &#39;0.000051883739338312&#39;}, {&#39;uuid&#39;: &#39;aKzUVe4Hh_CON&#39;, &#39;symbol&#39;: &#39;USDC&#39;, &#39;name&#39;: &#39;USDC&#39;, &#39;color&#39;: &#39;#7894b4&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#39;, &#39;marketCap&#39;: &#39;45002029025&#39;, &#39;price&#39;: &#39;0.9999694686501251&#39;, &#39;listedAt&#39;: 1539043200, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.02&#39;, &#39;rank&#39;: 4, &#39;sparkline&#39;: [&#39;0.9992684902580959&#39;, &#39;1.0011944809874016&#39;, &#39;1.0034376277835928&#39;, &#39;1.006036500176633&#39;, &#39;1.0058925437125612&#39;, &#39;1.0019240607279902&#39;, &#39;1.0037927969600813&#39;, &#39;1.0046281992102588&#39;, &#39;1.006726054238049&#39;, &#39;1.004791158530787&#39;, &#39;1.0071058935572963&#39;, &#39;1.0058995162910869&#39;, &#39;1.00237809519292&#39;, &#39;1.001765160832643&#39;, &#39;0.9984842167523754&#39;, &#39;0.9983045889366087&#39;, &#39;1.000288688759704&#39;, &#39;0.9989729839879627&#39;, &#39;1.0002002167783741&#39;, &#39;1.000121095472791&#39;, &#39;1.0000904611394987&#39;, &#39;1.0020786077803054&#39;, &#39;1.0028039038507761&#39;, &#39;1.0017780928036517&#39;, &#39;1.0000612521437147&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#39;, &#39;24hVolume&#39;: &#39;2534728964&#39;, &#39;btcPrice&#39;: &#39;0.000051916099626086&#39;}, {&#39;uuid&#39;: &#39;WcwrkfNI4FUAe&#39;, &#39;symbol&#39;: &#39;BNB&#39;, &#39;name&#39;: &#39;Binance Coin&#39;, &#39;color&#39;: &#39;#e8b342&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#39;, &#39;marketCap&#39;: &#39;38776387516&#39;, &#39;price&#39;: &#39;271.51394635832514&#39;, &#39;listedAt&#39;: 1503014400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.67&#39;, &#39;rank&#39;: 5, &#39;sparkline&#39;: [&#39;269.7257467704375&#39;, &#39;270.2557237712071&#39;, &#39;271.40107783995506&#39;, &#39;272.3396882751164&#39;, &#39;271.80139022907986&#39;, &#39;270.4484644246448&#39;, &#39;271.02345588485446&#39;, &#39;271.1221613952438&#39;, &#39;271.68688315094977&#39;, &#39;271.4054880974415&#39;, &#39;272.58024553380466&#39;, &#39;272.1825283157711&#39;, &#39;271.1264810632811&#39;, &#39;271.4278264312544&#39;, &#39;272.6744593777318&#39;, &#39;272.7764096168631&#39;, &#39;272.6917110935463&#39;, &#39;272.7308867277922&#39;, &#39;272.57446777537547&#39;, &#39;271.93856280350997&#39;, &#39;271.7839994779747&#39;, &#39;272.27481841625723&#39;, &#39;272.62413778052337&#39;, &#39;271.4225693787888&#39;, &#39;271.43082189387013&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#39;, &#39;24hVolume&#39;: &#39;633348957&#39;, &#39;btcPrice&#39;: &#39;0.01409637547038207&#39;}, {&#39;uuid&#39;: &#39;-l8Mn2pVlRs-p&#39;, &#39;symbol&#39;: &#39;XRP&#39;, &#39;name&#39;: &#39;XRP&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#39;, &#39;marketCap&#39;: &#39;23383147052&#39;, &#39;price&#39;: &#39;0.4679981759837921&#39;, &#39;listedAt&#39;: 1421798400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-3.16&#39;, &#39;rank&#39;: 6, &#39;sparkline&#39;: [&#39;0.482915645569848&#39;, &#39;0.48421177924403613&#39;, &#39;0.4864083769425917&#39;, &#39;0.48773769034516967&#39;, &#39;0.48542293566746925&#39;, &#39;0.4831747613064029&#39;, &#39;0.484164344586399&#39;, &#39;0.4847840928740315&#39;, &#39;0.4850723062541238&#39;, &#39;0.48402359878762125&#39;, &#39;0.48117205242706224&#39;, &#39;0.4793030141255263&#39;, &#39;0.473673402627763&#39;, &#39;0.4736942859008892&#39;, &#39;0.47837244196073503&#39;, &#39;0.4771386320963164&#39;, &#39;0.47599953826273805&#39;, &#39;0.47717928391388326&#39;, &#39;0.47664797903703815&#39;, &#39;0.4743980533211799&#39;, &#39;0.4704600147288911&#39;, &#39;0.46846004805539043&#39;, &#39;0.46780001309570696&#39;, &#39;0.4699524632109079&#39;, &#39;0.4703626683988354&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#39;, &#39;24hVolume&#39;: &#39;1490847663&#39;, &#39;btcPrice&#39;: &#39;0.000024297381761065&#39;}, {&#39;uuid&#39;: &#39;vSo2fu9iE1s0Y&#39;, &#39;symbol&#39;: &#39;BUSD&#39;, &#39;name&#39;: &#39;Binance USD&#39;, &#39;color&#39;: &#39;#f0b90b&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#39;, &#39;marketCap&#39;: &#39;21281192698&#39;, &#39;price&#39;: &#39;0.9997076248427321&#39;, &#39;listedAt&#39;: 1563197940, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.14&#39;, &#39;rank&#39;: 7, &#39;sparkline&#39;: [&#39;0.998666800223192&#39;, &#39;1.0013701335821172&#39;, &#39;1.0041560935606446&#39;, &#39;1.0081376900999608&#39;, &#39;1.0065763192014932&#39;, &#39;1.0020545072606588&#39;, &#39;1.0051181397049118&#39;, &#39;1.0060266749066105&#39;, &#39;1.0075501757854206&#39;, &#39;1.0056103897077058&#39;, &#39;1.0085719864769767&#39;, &#39;1.0063972809756199&#39;, &#39;1.0022968993676418&#39;, &#39;1.0018621246022679&#39;, &#39;0.9984728417671082&#39;, &#39;0.9982419762410677&#39;, &#39;1.0005998361543003&#39;, &#39;0.9993201215492994&#39;, &#39;0.9998990441679144&#39;, &#39;1.0003722904917463&#39;, &#39;1.0000381875169317&#39;, &#39;1.0035111634713725&#39;, &#39;1.0032602252560203&#39;, &#39;1.0022319380346858&#39;, &#39;1.00021002332989&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#39;, &#39;24hVolume&#39;: &#39;5254034486&#39;, &#39;btcPrice&#39;: &#39;0.000051902505301842&#39;}, {&#39;uuid&#39;: &#39;qzawljRxB5bYu&#39;, &#39;symbol&#39;: &#39;ADA&#39;, &#39;name&#39;: &#39;Cardano&#39;, &#39;color&#39;: &#39;#3cc8c8&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#39;, &#39;marketCap&#39;: &#39;11449990171&#39;, &#39;price&#39;: &#39;0.368019149385374&#39;, &#39;listedAt&#39;: 1506902400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.52&#39;, &#39;rank&#39;: 8, &#39;sparkline&#39;: [&#39;0.36624096617097385&#39;, &#39;0.3675985643608314&#39;, &#39;0.3695077757962249&#39;, &#39;0.3702266919415414&#39;, &#39;0.3699017988030716&#39;, &#39;0.3678204785838002&#39;, &#39;0.3681198776947073&#39;, &#39;0.3678384636296716&#39;, &#39;0.3681899249465513&#39;, &#39;0.3678148976004817&#39;, &#39;0.36816426439989897&#39;, &#39;0.3676720706604023&#39;, &#39;0.3659055749286493&#39;, &#39;0.3662248423981988&#39;, &#39;0.3711150831066729&#39;, &#39;0.3696719874383244&#39;, &#39;0.36928424375100066&#39;, &#39;0.3699568263426734&#39;, &#39;0.3703343081139867&#39;, &#39;0.369034032917112&#39;, &#39;0.36793546397279336&#39;, &#39;0.3684620893888765&#39;, &#39;0.3682207694554789&#39;, &#39;0.36766711824210513&#39;, &#39;0.36827481659217653&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#39;, &#39;24hVolume&#39;: &#39;351351510&#39;, &#39;btcPrice&#39;: &#39;0.000019106702177208&#39;}, {&#39;uuid&#39;: &#39;zNZHO_Sjf&#39;, &#39;symbol&#39;: &#39;SOL&#39;, &#39;name&#39;: &#39;Solana&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#39;, &#39;marketCap&#39;: &#39;10851469691&#39;, &#39;price&#39;: &#39;30.309772438515694&#39;, &#39;listedAt&#39;: 1586539320, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.71&#39;, &#39;rank&#39;: 9, &#39;sparkline&#39;: [&#39;29.779292131830086&#39;, &#39;29.78197082293148&#39;, &#39;29.992693906269178&#39;, &#39;30.11176618247792&#39;, &#39;30.109387681386362&#39;, &#39;29.96331271233968&#39;, &#39;30.02420685480023&#39;, &#39;30.044180226136188&#39;, &#39;30.08996952072842&#39;, &#39;30.099335215709427&#39;, &#39;30.12299077249488&#39;, &#39;30.074369632714316&#39;, &#39;29.94343861019959&#39;, &#39;29.97606508871426&#39;, &#39;30.268442461586247&#39;, &#39;30.274684899016176&#39;, &#39;30.143791021251996&#39;, &#39;30.191916261824414&#39;, &#39;30.166875642934123&#39;, &#39;30.025426273095853&#39;, &#39;29.971169166184325&#39;, &#39;30.03014792856177&#39;, &#39;30.062762359653107&#39;, &#39;30.101608066743243&#39;, &#39;30.258613848988315&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#39;, &#39;24hVolume&#39;: &#39;724728258&#39;, &#39;btcPrice&#39;: &#39;0.001573613210097466&#39;}, {&#39;uuid&#39;: &#39;a91GCGd_u96cF&#39;, &#39;symbol&#39;: &#39;DOGE&#39;, &#39;name&#39;: &#39;Dogecoin&#39;, &#39;color&#39;: &#39;#c2a633&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#39;, &#39;marketCap&#39;: &#39;8054352028&#39;, &#39;price&#39;: &#39;0.05904075101089855&#39;, &#39;listedAt&#39;: 1391212800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.06&#39;, &#39;rank&#39;: 10, &#39;sparkline&#39;: [&#39;0.05897221894324444&#39;, &#39;0.05907418019762592&#39;, &#39;0.05935434099524169&#39;, &#39;0.05947442674635466&#39;, &#39;0.05932288166603251&#39;, &#39;0.05905151235484094&#39;, &#39;0.05911599780916434&#39;, &#39;0.05912467080977094&#39;, &#39;0.05919434505879581&#39;, &#39;0.05915836871191926&#39;, &#39;0.05916498337485349&#39;, &#39;0.05901063785949082&#39;, &#39;0.05877544900711393&#39;, &#39;0.058821429695969&#39;, &#39;0.059168032497492036&#39;, &#39;0.059030157116194394&#39;, &#39;0.05886123314121539&#39;, &#39;0.05898461065725823&#39;, &#39;0.05898353030429193&#39;, &#39;0.05880736378190821&#39;, &#39;0.05874947463021348&#39;, &#39;0.058806754605286636&#39;, &#39;0.058876924121368565&#39;, &#39;0.05889074499293062&#39;, &#39;0.05904145416437127&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#39;, &#39;24hVolume&#39;: &#39;185959664&#39;, &#39;btcPrice&#39;: &#39;0.000003065259097979&#39;}, {&#39;uuid&#39;: &#39;25W7FG7om&#39;, &#39;symbol&#39;: &#39;DOT&#39;, &#39;name&#39;: &#39;Polkadot&#39;, &#39;color&#39;: &#39;#d64cA8&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#39;, &#39;marketCap&#39;: &#39;7124393075&#39;, &#39;price&#39;: &#39;6.175847367590765&#39;, &#39;listedAt&#39;: 1598365200, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.75&#39;, &#39;rank&#39;: 11, &#39;sparkline&#39;: [&#39;6.127991620102315&#39;, &#39;6.135570647907805&#39;, &#39;6.177054262763071&#39;, &#39;6.201143036762456&#39;, &#39;6.18608725895951&#39;, &#39;6.153865323964418&#39;, &#39;6.172678945410776&#39;, &#39;6.171154505222914&#39;, &#39;6.177436619815017&#39;, &#39;6.183538342125758&#39;, &#39;6.196858404657261&#39;, &#39;6.180986548211667&#39;, &#39;6.154329019089203&#39;, &#39;6.159506279578891&#39;, &#39;6.207165201209745&#39;, &#39;6.201484180071224&#39;, &#39;6.185434847288513&#39;, &#39;6.194424877333342&#39;, &#39;6.1905593478760235&#39;, &#39;6.172574108726447&#39;, &#39;6.166885988155259&#39;, &#39;6.151688266962456&#39;, &#39;6.1551678698202&#39;, &#39;6.156343114117336&#39;, &#39;6.171202940211879&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#39;, &#39;24hVolume&#39;: &#39;181478674&#39;, &#39;btcPrice&#39;: &#39;0.000320635696651981&#39;}, {&#39;uuid&#39;: &#39;uW2tk-ILY0ii&#39;, &#39;symbol&#39;: &#39;MATIC&#39;, &#39;name&#39;: &#39;Polygon&#39;, &#39;color&#39;: &#39;#8247e5&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/WulYRq14o/polygon.png&#39;, &#39;marketCap&#39;: &#39;7053691444&#39;, &#39;price&#39;: &#39;0.8056199266825756&#39;, &#39;listedAt&#39;: 1558961160, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.56&#39;, &#39;rank&#39;: 12, &#39;sparkline&#39;: [&#39;0.7929656630989123&#39;, &#39;0.7945814792999905&#39;, &#39;0.7998327570728745&#39;, &#39;0.8019094578715419&#39;, &#39;0.8021147419063761&#39;, &#39;0.8013530341691355&#39;, &#39;0.8036782628957397&#39;, &#39;0.8030577412379017&#39;, &#39;0.8025255056744882&#39;, &#39;0.8012736685930527&#39;, &#39;0.8010750893614114&#39;, &#39;0.7982976758404406&#39;, &#39;0.7934452801398792&#39;, &#39;0.7947191938953331&#39;, &#39;0.8033615762207741&#39;, &#39;0.8025233811440007&#39;, &#39;0.801181506274165&#39;, &#39;0.8023805992658026&#39;, &#39;0.7999324392412426&#39;, &#39;0.7992421953473817&#39;, &#39;0.8027932970798685&#39;, &#39;0.8037557321104462&#39;, &#39;0.8021472832569604&#39;, &#39;0.802399271337554&#39;, &#39;0.8064339658679954&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#39;, &#39;24hVolume&#39;: &#39;176969727&#39;, &#39;btcPrice&#39;: &#39;0.000041825921376252&#39;}, {&#39;uuid&#39;: &#39;xz24e0BjL&#39;, &#39;symbol&#39;: &#39;SHIB&#39;, &#39;name&#39;: &#39;Shiba Inu&#39;, &#39;color&#39;: &#39;#fda32b&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/D69LfI-tm/shib.png&#39;, &#39;marketCap&#39;: &#39;6065477065&#39;, &#39;price&#39;: &#39;0.000010288254400056&#39;, &#39;listedAt&#39;: 1620650373, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.08&#39;, &#39;rank&#39;: 13, &#39;sparkline&#39;: [&#39;0.00001028702380967&#39;, &#39;0.000010299757100138&#39;, &#39;0.000010328528501746&#39;, &#39;0.00001035397657097&#39;, &#39;0.000010325799253463&#39;, &#39;0.000010261336736295&#39;, &#39;0.000010305425753936&#39;, &#39;0.000010312419762226&#39;, &#39;0.000010300685862624&#39;, &#39;0.00001030226145774&#39;, &#39;0.000010304622940414&#39;, &#39;0.000010264927686856&#39;, &#39;0.000010226247021888&#39;, &#39;0.000010233749704094&#39;, &#39;0.000010302293636159&#39;, &#39;0.000010319537689079&#39;, &#39;0.000010287761561181&#39;, &#39;0.000010310831887809&#39;, &#39;0.000010298340789516&#39;, &#39;0.000010262647784569&#39;, &#39;0.000010263340484212&#39;, &#39;0.000010263562624024&#39;, &#39;0.000010260122200235&#39;, &#39;0.000010246918254572&#39;, &#39;0.000010282700043516&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#39;, &#39;24hVolume&#39;: &#39;131777081&#39;, &#39;btcPrice&#39;: &#39;5.34142348e-10&#39;}, {&#39;uuid&#39;: &#39;MoTuySvg7&#39;, &#39;symbol&#39;: &#39;DAI&#39;, &#39;name&#39;: &#39;Dai&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#39;, &#39;marketCap&#39;: &#39;6022249687&#39;, &#39;price&#39;: &#39;1.0001348966248338&#39;, &#39;listedAt&#39;: 1585574040, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.04&#39;, &#39;rank&#39;: 14, &#39;sparkline&#39;: [&#39;0.9992221140007138&#39;, &#39;1.001106514673964&#39;, &#39;1.0033248359236637&#39;, &#39;1.0057497672611582&#39;, &#39;1.0057816106428332&#39;, &#39;1.0018460883309128&#39;, &#39;1.0037893589453948&#39;, &#39;1.004441006983722&#39;, &#39;1.006488228697598&#39;, &#39;1.0046455686430067&#39;, &#39;1.006839282572942&#39;, &#39;1.0057533434217132&#39;, &#39;1.0023738215690707&#39;, &#39;1.001895612969572&#39;, &#39;0.9986220382194096&#39;, &#39;0.9984850781297001&#39;, &#39;1.0002876834421022&#39;, &#39;0.9991326702910865&#39;, &#39;1.0003313710852684&#39;, &#39;1.0000844535350382&#39;, &#39;1.0000246682358394&#39;, &#39;1.0019354179621889&#39;, &#39;1.0026928988748416&#39;, &#39;1.001757273113136&#39;, &#39;1.0000946262590136&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/MoTuySvg7+dai-dai&#39;, &#39;24hVolume&#39;: &#39;116650865&#39;, &#39;btcPrice&#39;: &#39;0.000051924688263525&#39;}, {&#39;uuid&#39;: &#39;qUhEFk1I61atv&#39;, &#39;symbol&#39;: &#39;TRX&#39;, &#39;name&#39;: &#39;TRON&#39;, &#39;color&#39;: &#39;#eb0029&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/behejNqQs/trx.svg&#39;, &#39;marketCap&#39;: &#39;5751340811&#39;, &#39;price&#39;: &#39;0.06230350664596631&#39;, &#39;listedAt&#39;: 1505260800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.61&#39;, &#39;rank&#39;: 15, &#39;sparkline&#39;: [&#39;0.06178925999561882&#39;, &#39;0.06188902919902188&#39;, &#39;0.06208327439522568&#39;, &#39;0.06217096473643583&#39;, &#39;0.06195567883699346&#39;, &#39;0.06167903201489996&#39;, &#39;0.06187580432947799&#39;, &#39;0.06169659534954404&#39;, &#39;0.06178367973745377&#39;, &#39;0.06190323842984856&#39;, &#39;0.06178722448126036&#39;, &#39;0.061656129662783526&#39;, &#39;0.06145733999249846&#39;, &#39;0.061569863706365545&#39;, &#39;0.06164654120934892&#39;, &#39;0.06169019936883608&#39;, &#39;0.061659433517264745&#39;, &#39;0.06176271948140057&#39;, &#39;0.06187120527808797&#39;, &#39;0.06188440337021234&#39;, &#39;0.06195076198945482&#39;, &#39;0.062184756680430574&#39;, &#39;0.06228899754281295&#39;, &#39;0.062343991011393755&#39;, &#39;0.062271544228166185&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#39;, &#39;24hVolume&#39;: &#39;303409144&#39;, &#39;btcPrice&#39;: &#39;0.000003234653816434&#39;}, {&#39;uuid&#39;: &#39;Mtfb0obXVh59u&#39;, &#39;symbol&#39;: &#39;WETH&#39;, &#39;name&#39;: &#39;Wrapped Ether&#39;, &#39;color&#39;: &#39;#303030&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#39;, &#39;marketCap&#39;: &#39;5369821718&#39;, &#39;price&#39;: &#39;1311.0409274618196&#39;, &#39;listedAt&#39;: 1600259445, &#39;tier&#39;: 1, &#39;change&#39;: &#39;2.13&#39;, &#39;rank&#39;: 16, &#39;sparkline&#39;: [&#39;1285.1828850790837&#39;, &#39;1287.363244198098&#39;, &#39;1293.1449027822418&#39;, &#39;1294.1133832391781&#39;, &#39;1293.2098797112087&#39;, &#39;1284.4766268447952&#39;, &#39;1294.2008059276866&#39;, &#39;1284.8489860083355&#39;, &#39;1294.3438534069362&#39;, &#39;1288.1667970854269&#39;, &#39;1294.2112993733099&#39;, &#39;1293.6233048749493&#39;, &#39;1288.2521915511993&#39;, &#39;1287.831473615162&#39;, &#39;1295.2044725159421&#39;, &#39;1301.5319563678156&#39;, &#39;1290.6320976188583&#39;, &#39;1309.2409297704598&#39;, &#39;1305.3673327728502&#39;, &#39;1302.1105466385652&#39;, &#39;1300.2635877591488&#39;, &#39;1294.202936656439&#39;, &#39;1292.8462741463727&#39;, &#39;1300.1980873250807&#39;, &#39;1302.037350040177&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#39;, &#39;24hVolume&#39;: &#39;1537593429&#39;, &#39;btcPrice&#39;: &#39;0.06809163687297759&#39;}, {&#39;uuid&#39;: &#39;_H5FVG9iW&#39;, &#39;symbol&#39;: &#39;UNI&#39;, &#39;name&#39;: &#39;Uniswap&#39;, &#39;color&#39;: &#39;#ff007a&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#39;, &#39;marketCap&#39;: &#39;4751096691&#39;, &#39;price&#39;: &#39;6.118098383396773&#39;, &#39;listedAt&#39;: 1600323371, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.84&#39;, &#39;rank&#39;: 17, &#39;sparkline&#39;: [&#39;6.066366207115234&#39;, &#39;6.076820724181371&#39;, &#39;6.133106316177594&#39;, &#39;6.154170751210986&#39;, &#39;6.139425244361414&#39;, &#39;6.106642877427982&#39;, &#39;6.12375793261306&#39;, &#39;6.127189918435&#39;, &#39;6.116794397947692&#39;, &#39;6.113261762478594&#39;, &#39;6.110602630778399&#39;, &#39;6.086438294642949&#39;, &#39;6.0425382795773785&#39;, &#39;6.054141928419491&#39;, &#39;6.129229203263836&#39;, &#39;6.112833666971998&#39;, &#39;6.094201220883914&#39;, &#39;6.118817816090227&#39;, &#39;6.10436582581904&#39;, &#39;6.061970137090749&#39;, &#39;6.071736791977104&#39;, &#39;6.087531967026303&#39;, &#39;6.080374276633867&#39;, &#39;6.075974637687906&#39;, &#39;6.108101838838083&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#39;, &#39;24hVolume&#39;: &#39;64632065&#39;, &#39;btcPrice&#39;: &#39;0.000317637503096364&#39;}, {&#39;uuid&#39;: &#39;dvUj0CzDZ&#39;, &#39;symbol&#39;: &#39;AVAX&#39;, &#39;name&#39;: &#39;Avalanche&#39;, &#39;color&#39;: &#39;#e84242&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#39;, &#39;marketCap&#39;: &#39;4695381142&#39;, &#39;price&#39;: &#39;15.843421142007257&#39;, &#39;listedAt&#39;: 1600961596, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.80&#39;, &#39;rank&#39;: 18, &#39;sparkline&#39;: [&#39;15.556294378707268&#39;, &#39;15.578461253826736&#39;, &#39;15.692071915682495&#39;, &#39;15.710311364382136&#39;, &#39;15.703328183344489&#39;, &#39;15.612745355982279&#39;, &#39;15.65185051862559&#39;, &#39;15.676165162622262&#39;, &#39;15.681948998910075&#39;, &#39;15.683202354117137&#39;, &#39;15.691087677051772&#39;, &#39;15.67723145209387&#39;, &#39;15.610721683624138&#39;, &#39;15.636209762293303&#39;, &#39;15.801016042086747&#39;, &#39;15.772790710441358&#39;, &#39;15.751428460595337&#39;, &#39;15.777108229978905&#39;, &#39;15.767788973992937&#39;, &#39;15.715176556251059&#39;, &#39;15.728651256721756&#39;, &#39;15.760438432458153&#39;, &#39;15.77175949209359&#39;, &#39;15.757845555992033&#39;, &#39;15.822121646849924&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#39;, &#39;24hVolume&#39;: &#39;265510194&#39;, &#39;btcPrice&#39;: &#39;0.00082255374410264&#39;}, {&#39;uuid&#39;: &#39;ncYFcP709&#39;, &#39;symbol&#39;: &#39;CAKE&#39;, &#39;name&#39;: &#39;PancakeSwap&#39;, &#39;color&#39;: &#39;#fe9555&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#39;, &#39;marketCap&#39;: &#39;4323946040&#39;, &#39;price&#39;: &#39;4.586317311995357&#39;, &#39;listedAt&#39;: 1613642379, &#39;tier&#39;: 1, &#39;change&#39;: &#39;2.11&#39;, &#39;rank&#39;: 19, &#39;sparkline&#39;: [&#39;4.493300906219307&#39;, &#39;4.510354310983383&#39;, &#39;4.538716754542554&#39;, &#39;4.586100075564221&#39;, &#39;4.603697361566694&#39;, &#39;4.58882552104198&#39;, &#39;4.612065728327925&#39;, &#39;4.612334971122951&#39;, &#39;4.60633433062466&#39;, &#39;4.606761360070192&#39;, &#39;4.620733868437029&#39;, &#39;4.589286596625483&#39;, &#39;4.5704408245619135&#39;, &#39;4.5719851688345985&#39;, &#39;4.581265969420576&#39;, &#39;4.579330632596923&#39;, &#39;4.5845750665202205&#39;, &#39;4.58820091242423&#39;, &#39;4.5897498590314205&#39;, &#39;4.578425153141392&#39;, &#39;4.57548692480973&#39;, &#39;4.588697254898124&#39;, &#39;4.596621802908582&#39;, &#39;4.584634399937132&#39;, &#39;4.580778645889613&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#39;, &#39;24hVolume&#39;: &#39;41234499&#39;, &#39;btcPrice&#39;: &#39;0.000238110976335922&#39;}, {&#39;uuid&#39;: &#39;PDKcptVnzJTmN&#39;, &#39;symbol&#39;: &#39;OKB&#39;, &#39;name&#39;: &#39;OKB&#39;, &#39;color&#39;: &#39;#2d60e0&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#39;, &#39;marketCap&#39;: &#39;4159126460&#39;, &#39;price&#39;: &#39;16.528895354423955&#39;, &#39;listedAt&#39;: 1538524800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.66&#39;, &#39;rank&#39;: 20, &#39;sparkline&#39;: [&#39;16.67517919298459&#39;, &#39;16.706567881651157&#39;, &#39;16.829655731290323&#39;, &#39;16.840844229912264&#39;, &#39;16.806868356798702&#39;, &#39;16.73845699603562&#39;, &#39;16.77475915313849&#39;, &#39;16.777821900521094&#39;, &#39;16.78576508709148&#39;, &#39;16.737701171786295&#39;, &#39;16.766710095462198&#39;, &#39;16.72389532985623&#39;, &#39;16.655505585599027&#39;, &#39;16.65414438251343&#39;, &#39;16.653288800601384&#39;, &#39;16.62481695753641&#39;, &#39;16.650390694351074&#39;, &#39;16.68118688530056&#39;, &#39;16.768019022434096&#39;, &#39;16.652467081423396&#39;, &#39;16.626569957965284&#39;, &#39;16.709493448611227&#39;, &#39;16.65390309972077&#39;, &#39;16.604486171066263&#39;, &#39;16.56513553654581&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#39;, &#39;24hVolume&#39;: &#39;21055393&#39;, &#39;btcPrice&#39;: &#39;0.000858141978162404&#39;}, {&#39;uuid&#39;: &#39;Knsels4_Ol-Ny&#39;, &#39;symbol&#39;: &#39;ATOM&#39;, &#39;name&#39;: &#39;Cosmos&#39;, &#39;color&#39;: &#39;#5064fb&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/HJzHboruM/atom.svg&#39;, &#39;marketCap&#39;: &#39;3704290623&#39;, &#39;price&#39;: &#39;11.851454713454345&#39;, &#39;listedAt&#39;: 1552520100, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.51&#39;, &#39;rank&#39;: 21, &#39;sparkline&#39;: [&#39;11.677080736860045&#39;, &#39;11.681543911726088&#39;, &#39;11.731173900065013&#39;, &#39;11.755099946305647&#39;, &#39;11.706621543642804&#39;, &#39;11.662726486210563&#39;, &#39;11.680031521303414&#39;, &#39;11.67181592337213&#39;, &#39;11.655732184173011&#39;, &#39;11.638652757838654&#39;, &#39;11.6509799501201&#39;, &#39;11.609136651997028&#39;, &#39;11.562236776792684&#39;, &#39;11.583599820497874&#39;, &#39;11.713817045289046&#39;, &#39;11.72498926938848&#39;, &#39;11.711524594197096&#39;, &#39;11.760891764908814&#39;, &#39;11.727508433502521&#39;, &#39;11.673989799795732&#39;, &#39;11.689724281669434&#39;, &#39;11.81974223463701&#39;, &#39;11.811219925115381&#39;, &#39;11.795018369932103&#39;, &#39;11.842995361266048&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#39;, &#39;24hVolume&#39;: &#39;147778498&#39;, &#39;btcPrice&#39;: &#39;0.000615300089560056&#39;}, {&#39;uuid&#39;: &#39;D7B1x_ks7WhV5&#39;, &#39;symbol&#39;: &#39;LTC&#39;, &#39;name&#39;: &#39;Litecoin&#39;, &#39;color&#39;: &#39;#345d9d&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#39;, &#39;marketCap&#39;: &#39;3650773096&#39;, &#39;price&#39;: &#39;51.51707071608999&#39;, &#39;listedAt&#39;: 1382572800, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.72&#39;, &#39;rank&#39;: 22, &#39;sparkline&#39;: [&#39;50.627892347717555&#39;, &#39;50.68105374337251&#39;, &#39;50.93325453666246&#39;, &#39;51.061436465391125&#39;, &#39;51.076559246394574&#39;, &#39;50.97030930787476&#39;, &#39;51.11614810869589&#39;, &#39;51.169322789183084&#39;, &#39;51.24022369392634&#39;, &#39;51.18687432691696&#39;, &#39;51.27744763568081&#39;, &#39;51.30571208707049&#39;, &#39;51.0727135740256&#39;, &#39;51.093044170479956&#39;, &#39;51.45729038827679&#39;, &#39;51.387164907125566&#39;, &#39;51.255780349918&#39;, &#39;51.54681424612038&#39;, &#39;51.48756805929433&#39;, &#39;51.30163084598047&#39;, &#39;51.29846985166204&#39;, &#39;51.327423348513456&#39;, &#39;51.34638165822007&#39;, &#39;51.350448772263256&#39;, &#39;51.49812448626248&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#39;, &#39;24hVolume&#39;: &#39;342847937&#39;, &#39;btcPrice&#39;: &#39;0.00267464703632511&#39;}, {&#39;uuid&#39;: &#39;NfeOYfNcl&#39;, &#39;symbol&#39;: &#39;FTT&#39;, &#39;name&#39;: &#39;FTX Token&#39;, &#39;color&#39;: &#39;#77d9ed&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#39;, &#39;marketCap&#39;: &#39;3164250342&#39;, &#39;price&#39;: &#39;23.724765611501525&#39;, &#39;listedAt&#39;: 1566222960, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.26&#39;, &#39;rank&#39;: 23, &#39;sparkline&#39;: [&#39;23.422889747125755&#39;, &#39;23.45193839102034&#39;, &#39;23.553505010734018&#39;, &#39;23.606274337019276&#39;, &#39;23.568331153460292&#39;, &#39;23.48179244341023&#39;, &#39;23.552453566042267&#39;, &#39;23.58002988467209&#39;, &#39;23.625966642416262&#39;, &#39;23.64371946262818&#39;, &#39;23.692860189987208&#39;, &#39;23.665878547946093&#39;, &#39;23.584609899105775&#39;, &#39;23.60255407012774&#39;, &#39;23.788087998429674&#39;, &#39;23.793379158427605&#39;, &#39;23.74325135916768&#39;, &#39;23.778606488668956&#39;, &#39;23.726147905562357&#39;, &#39;23.65772258786339&#39;, &#39;23.65758573297813&#39;, &#39;23.692469511178615&#39;, &#39;23.687071421696714&#39;, &#39;23.673358887618996&#39;, &#39;23.711819662867665&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#39;, &#39;24hVolume&#39;: &#39;45798117&#39;, &#39;btcPrice&#39;: &#39;0.00123173490162149&#39;}, {&#39;uuid&#39;: &#39;hnfQfsYfeIGUQ&#39;, &#39;symbol&#39;: &#39;ETC&#39;, &#39;name&#39;: &#39;Ethereum Classic&#39;, &#39;color&#39;: &#39;#699070&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/rJfyor__W/etc.svg&#39;, &#39;marketCap&#39;: &#39;2696746693&#39;, &#39;price&#39;: &#39;23.185196497619483&#39;, &#39;listedAt&#39;: 1469577600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.63&#39;, &#39;rank&#39;: 24, &#39;sparkline&#39;: [&#39;23.009826502260424&#39;, &#39;23.054902748197474&#39;, &#39;23.227315941868962&#39;, &#39;23.261048303220505&#39;, &#39;23.19478801962695&#39;, &#39;23.134179250438134&#39;, &#39;23.158973449278957&#39;, &#39;23.145554512434977&#39;, &#39;23.15153399571827&#39;, &#39;23.13623337785194&#39;, &#39;23.135920460697257&#39;, &#39;23.044626022443538&#39;, &#39;22.92855020282973&#39;, &#39;22.997990019634567&#39;, &#39;23.25364400384934&#39;, &#39;23.15709081797315&#39;, &#39;23.13010981894184&#39;, &#39;23.221742209566912&#39;, &#39;23.177553184940408&#39;, &#39;23.043054917471377&#39;, &#39;23.03547723015562&#39;, &#39;23.088089023214422&#39;, &#39;23.090110527703704&#39;, &#39;23.089303017884227&#39;, &#39;23.15715759138435&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#39;, &#39;24hVolume&#39;: &#39;301624614&#39;, &#39;btcPrice&#39;: &#39;0.001203721722469857&#39;}, {&#39;uuid&#39;: &#39;3mVx2FX_iJFp5&#39;, &#39;symbol&#39;: &#39;XMR&#39;, &#39;name&#39;: &#39;Monero&#39;, &#39;color&#39;: &#39;#ff7519&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#39;, &#39;marketCap&#39;: &#39;2613425460&#39;, &#39;price&#39;: &#39;143.6876227076651&#39;, &#39;listedAt&#39;: 1422489600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.76&#39;, &#39;rank&#39;: 25, &#39;sparkline&#39;: [&#39;141.14259129245562&#39;, &#39;141.4295414639023&#39;, &#39;142.35411767096969&#39;, &#39;142.27141187401725&#39;, &#39;142.3631890373508&#39;, &#39;142.16642749077567&#39;, &#39;142.30935959035088&#39;, &#39;142.3242356920453&#39;, &#39;142.5513287602977&#39;, &#39;142.58980434214112&#39;, &#39;142.7969840950517&#39;, &#39;142.51660968344024&#39;, &#39;142.01363520338603&#39;, &#39;142.00599102008712&#39;, &#39;142.79154519911492&#39;, &#39;142.86088508012176&#39;, &#39;142.79011276375786&#39;, &#39;142.94853307245117&#39;, &#39;143.08491022418127&#39;, &#39;142.9453566942434&#39;, &#39;143.25349481043426&#39;, &#39;143.60855408972992&#39;, &#39;143.8092224183789&#39;, &#39;143.84747284136193&#39;, &#39;143.75204425488258&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#39;, &#39;24hVolume&#39;: &#39;78859850&#39;, &#39;btcPrice&#39;: &#39;0.007459928697219714&#39;}, {&#39;uuid&#39;: &#39;f3iaFeCKEmkaZ&#39;, &#39;symbol&#39;: &#39;XLM&#39;, &#39;name&#39;: &#39;Stellar&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#39;, &#39;marketCap&#39;: &#39;2284610201&#39;, &#39;price&#39;: &#39;0.1130685970054593&#39;, &#39;listedAt&#39;: 1484611200, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.32&#39;, &#39;rank&#39;: 26, &#39;sparkline&#39;: [&#39;0.11326848142580676&#39;, &#39;0.11344892732092035&#39;, &#39;0.1140801659260228&#39;, &#39;0.11409490559070389&#39;, &#39;0.11382208283412296&#39;, &#39;0.11315079445492211&#39;, &#39;0.11358740302305&#39;, &#39;0.11381791021926006&#39;, &#39;0.11420885370568662&#39;, &#39;0.11421605951271376&#39;, &#39;0.11418647831757364&#39;, &#39;0.11391628721537556&#39;, &#39;0.11295888335219267&#39;, &#39;0.11287266551120727&#39;, &#39;0.1136958063179714&#39;, &#39;0.11344569701195648&#39;, &#39;0.11331118790844437&#39;, &#39;0.11355202331549087&#39;, &#39;0.11355357347869835&#39;, &#39;0.1132450226293032&#39;, &#39;0.11315060431611924&#39;, &#39;0.1128652752751288&#39;, &#39;0.11294965016753372&#39;, &#39;0.11308176561046572&#39;, &#39;0.11318031968162583&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#39;, &#39;24hVolume&#39;: &#39;111200513&#39;, &#39;btcPrice&#39;: &#39;0.000005870259773672&#39;}, {&#39;uuid&#39;: &#39;TpHE2IShQw-sJ&#39;, &#39;symbol&#39;: &#39;ALGO&#39;, &#39;name&#39;: &#39;Algorand&#39;, &#39;color&#39;: None, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#39;, &#39;marketCap&#39;: &#39;2255786529&#39;, &#39;price&#39;: &#39;0.3214243614679588&#39;, &#39;listedAt&#39;: 1562082540, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.35&#39;, &#39;rank&#39;: 27, &#39;sparkline&#39;: [&#39;0.3228509821189612&#39;, &#39;0.32323967003082865&#39;, &#39;0.32754629719187717&#39;, &#39;0.3271574626175146&#39;, &#39;0.3254660226167553&#39;, &#39;0.32312082525167707&#39;, &#39;0.32408148910266743&#39;, &#39;0.3240025913897053&#39;, &#39;0.32329388126494424&#39;, &#39;0.32363231040078894&#39;, &#39;0.323677672438576&#39;, &#39;0.3232529062740534&#39;, &#39;0.32164600055099785&#39;, &#39;0.32244039768966676&#39;, &#39;0.3243241234691804&#39;, &#39;0.32412801898565435&#39;, &#39;0.3234221604224773&#39;, &#39;0.3232214892097797&#39;, &#39;0.32275614752105447&#39;, &#39;0.32023134668107905&#39;, &#39;0.3197700323686207&#39;, &#39;0.3197251815799654&#39;, &#39;0.3199499129230284&#39;, &#39;0.32012240861564684&#39;, &#39;0.3212754099164011&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#39;, &#39;24hVolume&#39;: &#39;77412022&#39;, &#39;btcPrice&#39;: &#39;0.00001668760866744&#39;}, {&#39;uuid&#39;: &#39;9_jH48RBW&#39;, &#39;symbol&#39;: &#39;BTCB&#39;, &#39;name&#39;: &#39;Bitcoin BEP2&#39;, &#39;color&#39;: &#39;#ff9d14&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/Swr_SeZio/4023.png&#39;, &#39;marketCap&#39;: &#39;2161577553&#39;, &#39;price&#39;: &#39;19213.851903591163&#39;, &#39;listedAt&#39;: 1629334963, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.38&#39;, &#39;rank&#39;: 28, &#39;sparkline&#39;: [&#39;19114.42642814125&#39;, &#39;19158.87906658461&#39;, &#39;19229.33170550436&#39;, &#39;19305.239552425108&#39;, &#39;19274.049496025942&#39;, &#39;19171.55292388023&#39;, &#39;19212.564915877847&#39;, &#39;19226.051568792704&#39;, &#39;19267.448185388275&#39;, &#39;19235.961125930182&#39;, &#39;19298.107049575574&#39;, &#39;19244.836643006507&#39;, &#39;19182.347222363045&#39;, &#39;19180.66290231192&#39;, &#39;19285.27544485933&#39;, &#39;19298.339510838916&#39;, &#39;19279.85620097416&#39;, &#39;19275.43335528743&#39;, &#39;19276.917285330328&#39;, &#39;19250.12693673803&#39;, &#39;19229.33354036907&#39;, &#39;19267.81459050363&#39;, &#39;19261.998025075012&#39;, &#39;19238.826549892594&#39;, &#39;19222.192332801496&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#39;, &#39;24hVolume&#39;: &#39;4127730&#39;, &#39;btcPrice&#39;: &#39;0.9979113537541332&#39;}, {&#39;uuid&#39;: &#39;65PHZTpmE55b&#39;, &#39;symbol&#39;: &#39;CRO&#39;, &#39;name&#39;: &#39;Cronos&#39;, &#39;color&#39;: &#39;#01275d&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/2o91jm73M/cro.svg&#39;, &#39;marketCap&#39;: &#39;2111037990&#39;, &#39;price&#39;: &#39;0.10434970048446979&#39;, &#39;listedAt&#39;: 1548953220, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.10&#39;, &#39;rank&#39;: 29, &#39;sparkline&#39;: [&#39;0.10443343150357852&#39;, &#39;0.10457854223608624&#39;, &#39;0.10496162850137888&#39;, &#39;0.1052377545774755&#39;, &#39;0.10500275485347672&#39;, &#39;0.10454831201110025&#39;, &#39;0.10483060825485868&#39;, &#39;0.10495291248988114&#39;, &#39;0.10500073820000921&#39;, &#39;0.104947461426008&#39;, &#39;0.10514642078722221&#39;, &#39;0.10511032383249819&#39;, &#39;0.10453896198834686&#39;, &#39;0.10456106806943212&#39;, &#39;0.10504312624906544&#39;, &#39;0.10495235484653645&#39;, &#39;0.10480910903417291&#39;, &#39;0.10490227540799531&#39;, &#39;0.1048467599781094&#39;, &#39;0.10423242154855268&#39;, &#39;0.10395427701644011&#39;, &#39;0.10404337439618513&#39;, &#39;0.10403546467560235&#39;, &#39;0.10422205903095667&#39;, &#39;0.10437391709717908&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#39;, &#39;24hVolume&#39;: &#39;32095175&#39;, &#39;btcPrice&#39;: &#39;0.000005417594852788&#39;}, {&#39;uuid&#39;: &#39;ZlZpzOJo43mIo&#39;, &#39;symbol&#39;: &#39;BCH&#39;, &#39;name&#39;: &#39;Bitcoin Cash&#39;, &#39;color&#39;: &#39;#8dc451&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/By8ziihX7/bch.svg&#39;, &#39;marketCap&#39;: &#39;2103054981&#39;, &#39;price&#39;: &#39;109.92687374233975&#39;, &#39;listedAt&#39;: 1541808000, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.67&#39;, &#39;rank&#39;: 30, &#39;sparkline&#39;: [&#39;109.17933990006964&#39;, &#39;109.2571223538715&#39;, &#39;110.01346016889657&#39;, &#39;110.50055879831783&#39;, &#39;110.288734081936&#39;, &#39;110.01730660442827&#39;, &#39;110.33532039812508&#39;, &#39;110.23548588504212&#39;, &#39;110.17863904536503&#39;, &#39;110.28245339749361&#39;, &#39;110.41778221718387&#39;, &#39;110.17111492877967&#39;, &#39;109.64266483777767&#39;, &#39;109.69941023595798&#39;, &#39;110.2973677292952&#39;, &#39;110.03080292429843&#39;, &#39;109.96003471903117&#39;, &#39;110.28815364000589&#39;, &#39;110.34695414380178&#39;, &#39;109.88881440306969&#39;, &#39;109.78336281711432&#39;, &#39;109.8445552065359&#39;, &#39;109.81473495016556&#39;, &#39;109.75075388197355&#39;, &#39;109.86593431881356&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#39;, &#39;24hVolume&#39;: &#39;194231254&#39;, &#39;btcPrice&#39;: &#39;0.005707148775747563&#39;}, {&#39;uuid&#39;: &#39;08CsQa-Ov&#39;, &#39;symbol&#39;: &#39;WEMIX&#39;, &#39;name&#39;: &#39;WEMIX TOKEN&#39;, &#39;color&#39;: &#39;#9bdc70&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/1N84MQsoO/7548.png&#39;, &#39;marketCap&#39;: &#39;1999080236&#39;, &#39;price&#39;: &#39;1.9990802358622086&#39;, &#39;listedAt&#39;: 1638249982, &#39;tier&#39;: 1, &#39;change&#39;: &#39;4.72&#39;, &#39;rank&#39;: 31, &#39;sparkline&#39;: [&#39;1.9009795072338525&#39;, &#39;1.8958529642982938&#39;, &#39;1.8854962868857135&#39;, &#39;1.8672610010434048&#39;, &#39;1.8744549963915171&#39;, &#39;1.8700342475235852&#39;, &#39;1.8734649290927907&#39;, &#39;1.8814634872948404&#39;, &#39;1.8867415980372204&#39;, &#39;1.877677994921046&#39;, &#39;1.8793077291157578&#39;, &#39;1.8760537535179331&#39;, &#39;1.8690851903923544&#39;, &#39;1.8722655834631865&#39;, &#39;1.880796610823021&#39;, &#39;1.887829515033978&#39;, &#39;1.8836780716736292&#39;, &#39;1.8824256680808016&#39;, &#39;1.8883351780394657&#39;, &#39;1.9487416993467055&#39;, &#39;1.9856340321030443&#39;, &#39;2.0237536055610543&#39;, &#39;2.0218752615211244&#39;, &#39;2.0374012922578233&#39;, &#39;2.004975454288005&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#39;, &#39;24hVolume&#39;: &#39;90673824&#39;, &#39;btcPrice&#39;: &#39;0.000103787617461624&#39;}, {&#39;uuid&#39;: &#39;bauj_21eYVwso&#39;, &#39;symbol&#39;: &#39;QNT&#39;, &#39;name&#39;: &#39;Quant&#39;, &#39;color&#39;: &#39;#585e63&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/a-i9Dl392/quant.png&#39;, &#39;marketCap&#39;: &#39;1998530100&#39;, &#39;price&#39;: &#39;204.4064498806355&#39;, &#39;listedAt&#39;: 1533945600, &#39;tier&#39;: 1, &#39;change&#39;: &#39;12.22&#39;, &#39;rank&#39;: 32, &#39;sparkline&#39;: [&#39;181.29675084581194&#39;, &#39;184.53085103630525&#39;, &#39;185.5264985630614&#39;, &#39;185.43531585050238&#39;, &#39;184.5584292130631&#39;, &#39;181.95873756311758&#39;, &#39;184.2751721660849&#39;, &#39;184.69466337919994&#39;, &#39;185.98678905655126&#39;, &#39;184.99268493767045&#39;, &#39;185.73664501415738&#39;, &#39;184.76668140374295&#39;, &#39;184.38965831572327&#39;, &#39;185.81357245312682&#39;, &#39;191.78876892531724&#39;, &#39;192.22641744365225&#39;, &#39;189.34024969375088&#39;, &#39;191.2791122347322&#39;, &#39;192.3333679988614&#39;, &#39;193.0091840685389&#39;, &#39;192.36585541286235&#39;, &#39;194.6653781184778&#39;, &#39;196.29160750650303&#39;, &#39;200.72357918595918&#39;, &#39;203.92603443855936&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#39;, &#39;24hVolume&#39;: &#39;176943856&#39;, &#39;btcPrice&#39;: &#39;0.010612309624355777&#39;}, {&#39;uuid&#39;: &#39;SbWqqTui-&#39;, &#39;symbol&#39;: &#39;ENS&#39;, &#39;name&#39;: &#39;EnergySwap&#39;, &#39;color&#39;: &#39;#ffda55&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#39;, &#39;marketCap&#39;: &#39;1976704377&#39;, &#39;price&#39;: &#39;19.767043766007042&#39;, &#39;listedAt&#39;: 1626134763, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.72&#39;, &#39;rank&#39;: 33, &#39;sparkline&#39;: [&#39;19.47291145661599&#39;, &#39;19.434144087464656&#39;, &#39;19.7676644665621&#39;, &#39;20.063728131434093&#39;, &#39;19.89411620199196&#39;, &#39;19.767631215739492&#39;, &#39;19.71280643427797&#39;, &#39;19.674810627731674&#39;, &#39;19.548878007855556&#39;, &#39;19.636081558720257&#39;, &#39;19.668371159823067&#39;, &#39;19.86972289121075&#39;, &#39;19.828351328890005&#39;, &#39;19.82367540184303&#39;, &#39;19.83117344239175&#39;, &#39;19.69619744926179&#39;, &#39;19.68598881859378&#39;, &#39;19.866653950867132&#39;, &#39;19.835530305183646&#39;, &#39;19.682483697030126&#39;, &#39;19.6074552372614&#39;, &#39;19.620768168551354&#39;, &#39;19.667001178651198&#39;, &#39;19.821489833998555&#39;, &#39;19.802962193617184&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#39;, &#39;24hVolume&#39;: &#39;19620607&#39;, &#39;btcPrice&#39;: &#39;0.001026809470823108&#39;}, {&#39;uuid&#39;: &#39;DCrsaMv68&#39;, &#39;symbol&#39;: &#39;NEAR&#39;, &#39;name&#39;: &#39;NEAR Protocol&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/Cth83dCnl/near.png&#39;, &#39;marketCap&#39;: &#39;1814357051&#39;, &#39;price&#39;: &#39;2.9849041203028195&#39;, &#39;listedAt&#39;: 1615164591, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.64&#39;, &#39;rank&#39;: 34, &#39;sparkline&#39;: [&#39;2.966630713978872&#39;, &#39;2.9738533666301143&#39;, &#39;3.0145093539784673&#39;, &#39;3.0239133776462745&#39;, &#39;3.019132959136746&#39;, &#39;3.0020612472181036&#39;, &#39;3.009012305225228&#39;, &#39;3.011668530247856&#39;, &#39;3.0097250637869783&#39;, &#39;3.0093822944683466&#39;, &#39;3.0153849652209335&#39;, &#39;3.0093597166508657&#39;, &#39;2.986999584079386&#39;, &#39;2.990540658941724&#39;, &#39;3.0162672954495666&#39;, &#39;3.0068026628127114&#39;, &#39;3.000234215758183&#39;, &#39;3.0071812792905237&#39;, &#39;3.0028235259963028&#39;, &#39;2.9858015784571004&#39;, &#39;2.9848722014930456&#39;, &#39;2.9828570976785027&#39;, &#39;2.9862344554645195&#39;, &#39;2.9867270086481117&#39;, &#39;2.9897902347998464&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#39;, &#39;24hVolume&#39;: &#39;230504948&#39;, &#39;btcPrice&#39;: &#39;0.000154969311106213&#39;}, {&#39;uuid&#39;: &#39;AaQUAs2Mc&#39;, &#39;symbol&#39;: &#39;LUNC&#39;, &#39;name&#39;: &#39;Terra Classic&#39;, &#39;color&#39;: &#39;#0E3CA5&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#39;, &#39;marketCap&#39;: &#39;1778898015&#39;, &#39;price&#39;: &#39;0.000269929836118739&#39;, &#39;listedAt&#39;: 1565957940, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.62&#39;, &#39;rank&#39;: 35, &#39;sparkline&#39;: [&#39;0.000265298221338476&#39;, &#39;0.000265624899389116&#39;, &#39;0.000267081514261898&#39;, &#39;0.000268260794552709&#39;, &#39;0.000266919411339059&#39;, &#39;0.00026470302484104&#39;, &#39;0.000265554231971705&#39;, &#39;0.000265537161082865&#39;, &#39;0.000265147446959533&#39;, &#39;0.000263431248749569&#39;, &#39;0.000262000765071768&#39;, &#39;0.000260077995338229&#39;, &#39;0.000259428328663902&#39;, &#39;0.000258379641533165&#39;, &#39;0.000261890711526383&#39;, &#39;0.000261475907919132&#39;, &#39;0.000261776052740374&#39;, &#39;0.000262411873326807&#39;, &#39;0.000263975057431833&#39;, &#39;0.00026562955636176&#39;, &#39;0.000263393464767604&#39;, &#39;0.000263929734945088&#39;, &#39;0.000264293827218741&#39;, &#39;0.000265519511344094&#39;, &#39;0.000267920717278373&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#39;, &#39;24hVolume&#39;: &#39;288222329&#39;, &#39;btcPrice&#39;: &#39;1.4014132134e-8&#39;}, {&#39;uuid&#39;: &#39;QQ0NCmjVq&#39;, &#39;symbol&#39;: &#39;FLOW&#39;, &#39;name&#39;: &#39;Flow&#39;, &#39;color&#39;: &#39;#9efad7&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/xh8X8QBss/flow.png&#39;, &#39;marketCap&#39;: &#39;1548098652&#39;, &#39;price&#39;: &#39;1.494015298623054&#39;, &#39;listedAt&#39;: 1614963736, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.60&#39;, &#39;rank&#39;: 36, &#39;sparkline&#39;: [&#39;1.4866058878873494&#39;, &#39;1.488433318128835&#39;, &#39;1.4972001499727532&#39;, &#39;1.5054181157085391&#39;, &#39;1.4999778254497704&#39;, &#39;1.488394061848315&#39;, &#39;1.4930042640955252&#39;, &#39;1.491682592488768&#39;, &#39;1.495682397617236&#39;, &#39;1.4941382396826404&#39;, &#39;1.4978603568417026&#39;, &#39;1.4945702361692126&#39;, &#39;1.4858315112181861&#39;, &#39;1.4847456433735788&#39;, &#39;1.5018988516555754&#39;, &#39;1.4973522589881598&#39;, &#39;1.4946265474471796&#39;, &#39;1.5030159409849195&#39;, &#39;1.49759744785681&#39;, &#39;1.4872102342218796&#39;, &#39;1.4860019947729435&#39;, &#39;1.4873182722319185&#39;, &#39;1.487912863746499&#39;, &#39;1.4880032191596049&#39;, &#39;1.4926160448732846&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#39;, &#39;24hVolume&#39;: &#39;19896070&#39;, &#39;btcPrice&#39;: &#39;0.000077565815275256&#39;}, {&#39;uuid&#39;: &#39;ymQub4fuB&#39;, &#39;symbol&#39;: &#39;FIL&#39;, &#39;name&#39;: &#39;Filecoin&#39;, &#39;color&#39;: &#39;#0090ff&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#39;, &#39;marketCap&#39;: &#39;1535153926&#39;, &#39;price&#39;: &#39;5.132235061140943&#39;, &#39;listedAt&#39;: 1602839473, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-1.09&#39;, &#39;rank&#39;: 37, &#39;sparkline&#39;: [&#39;5.181543390744217&#39;, &#39;5.196896326282113&#39;, &#39;5.227354799119025&#39;, &#39;5.228801189009791&#39;, &#39;5.2134047554434675&#39;, &#39;5.18868041963003&#39;, &#39;5.194963405902611&#39;, &#39;5.183017958721169&#39;, &#39;5.179383223765652&#39;, &#39;5.17240000740603&#39;, &#39;5.175202835942727&#39;, &#39;5.153922010312344&#39;, &#39;5.134149803630891&#39;, &#39;5.126223764617421&#39;, &#39;5.160439536288186&#39;, &#39;5.160121788290326&#39;, &#39;5.153411620162354&#39;, &#39;5.164873209015129&#39;, &#39;5.157925108988809&#39;, &#39;5.139099127952961&#39;, &#39;5.11961412048712&#39;, &#39;5.128650491926685&#39;, &#39;5.122372832857552&#39;, &#39;5.115429204532601&#39;, &#39;5.134882082352315&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#39;, &#39;24hVolume&#39;: &#39;132055163&#39;, &#39;btcPrice&#39;: &#39;0.000266453761931716&#39;}, {&#39;uuid&#39;: &#39;FEbS54wxo4oIl&#39;, &#39;symbol&#39;: &#39;VET&#39;, &#39;name&#39;: &#39;VeChain&#39;, &#39;color&#39;: &#39;#4bc0fa&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#39;, &#39;marketCap&#39;: &#39;1522495962&#39;, &#39;price&#39;: &#39;0.022805258485620587&#39;, &#39;listedAt&#39;: 1533427200, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.93&#39;, &#39;rank&#39;: 38, &#39;sparkline&#39;: [&#39;0.023009512657662212&#39;, &#39;0.02304753774709044&#39;, &#39;0.023154538514022712&#39;, &#39;0.02320614698643712&#39;, &#39;0.023123773267541548&#39;, &#39;0.023016850448977583&#39;, &#39;0.023108143653703485&#39;, &#39;0.023135757783272076&#39;, &#39;0.02316215813675481&#39;, &#39;0.023120759631242407&#39;, &#39;0.023096880698202822&#39;, &#39;0.02304641725738726&#39;, &#39;0.02289646774350878&#39;, &#39;0.022891453583105972&#39;, &#39;0.02304003760722042&#39;, &#39;0.02300886964004927&#39;, &#39;0.022980941210397607&#39;, &#39;0.023050054688084295&#39;, &#39;0.02298055454281501&#39;, &#39;0.022862466319193312&#39;, &#39;0.02286195396209772&#39;, &#39;0.02286809767446637&#39;, &#39;0.02286156016248154&#39;, &#39;0.022817842948867614&#39;, &#39;0.0228015795710229&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#39;, &#39;24hVolume&#39;: &#39;119656768&#39;, &#39;btcPrice&#39;: &#39;0.000001183996220541&#39;}, {&#39;uuid&#39;: &#39;jad286TjB&#39;, &#39;symbol&#39;: &#39;HBAR&#39;, &#39;name&#39;: &#39;Hedera&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#39;, &#39;marketCap&#39;: &#39;1478929069&#39;, &#39;price&#39;: &#39;0.06072894691712498&#39;, &#39;listedAt&#39;: 1568704980, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.27&#39;, &#39;rank&#39;: 39, &#39;sparkline&#39;: [&#39;0.060473070991671755&#39;, &#39;0.060172885299288444&#39;, &#39;0.06054410785484&#39;, &#39;0.06074678837904237&#39;, &#39;0.060586170781581794&#39;, &#39;0.06024801900625227&#39;, &#39;0.06052188847509759&#39;, &#39;0.06029299408072746&#39;, &#39;0.06022477945608857&#39;, &#39;0.060355854786571204&#39;, &#39;0.060792879860936844&#39;, &#39;0.061054291796125&#39;, &#39;0.06068830815538991&#39;, &#39;0.06090610226011623&#39;, &#39;0.061153740524561205&#39;, &#39;0.06088514158179738&#39;, &#39;0.061030858477345615&#39;, &#39;0.06127223563023836&#39;, &#39;0.061384777100247714&#39;, &#39;0.06104697521273881&#39;, &#39;0.06063386871161946&#39;, &#39;0.06066557893582467&#39;, &#39;0.06058820573088085&#39;, &#39;0.06063614365030902&#39;, &#39;0.060739802600631276&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/jad286TjB+hedera-hbar&#39;, &#39;24hVolume&#39;: &#39;47369877&#39;, &#39;btcPrice&#39;: &#39;0.000003152906320823&#39;}, {&#39;uuid&#39;: &#39;DXwP4wF9ksbBO&#39;, &#39;symbol&#39;: &#39;HT&#39;, &#39;name&#39;: &#39;Huobi Token&#39;, &#39;color&#39;: &#39;#2daadf&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/ryFpQe0c7/ht.svg&#39;, &#39;marketCap&#39;: &#39;1416558067&#39;, &#39;price&#39;: &#39;6.927245074227631&#39;, &#39;listedAt&#39;: 1517702400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-6.97&#39;, &#39;rank&#39;: 40, &#39;sparkline&#39;: [&#39;7.410423227942487&#39;, &#39;7.402751419107782&#39;, &#39;7.396097948854609&#39;, &#39;7.367355538923841&#39;, &#39;7.294211239704354&#39;, &#39;7.247300213137647&#39;, &#39;7.240884770363452&#39;, &#39;7.241544902222515&#39;, &#39;7.215407483945363&#39;, &#39;7.317114188300403&#39;, &#39;7.275193856889543&#39;, &#39;7.1458047961504985&#39;, &#39;7.055889351185736&#39;, &#39;6.987854987746826&#39;, &#39;7.02579653620608&#39;, &#39;7.008119787885445&#39;, &#39;6.990637743724626&#39;, &#39;6.889691766932263&#39;, &#39;6.841451332855427&#39;, &#39;6.736104858111476&#39;, &#39;6.653199469585441&#39;, &#39;6.655209890298203&#39;, &#39;6.7480675726349135&#39;, &#39;6.723047933024401&#39;, &#39;6.812334413739443&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/DXwP4wF9ksbBO+huobitoken-ht&#39;, &#39;24hVolume&#39;: &#39;39906800&#39;, &#39;btcPrice&#39;: &#39;0.00035964652590183&#39;}, {&#39;uuid&#39;: &#39;tEf7-dnwV3BXS&#39;, &#39;symbol&#39;: &#39;MANA&#39;, &#39;name&#39;: &#39;Decentraland&#39;, &#39;color&#39;: &#39;#f47e33&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#39;, &#39;marketCap&#39;: &#39;1403336712&#39;, &#39;price&#39;: &#39;0.639773230488771&#39;, &#39;listedAt&#39;: 1500336000, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.36&#39;, &#39;rank&#39;: 41, &#39;sparkline&#39;: [&#39;0.6426894737310874&#39;, &#39;0.6424255210768235&#39;, &#39;0.6462894724935391&#39;, &#39;0.6472704271222292&#39;, &#39;0.6450687815206809&#39;, &#39;0.6408930067152339&#39;, &#39;0.6425264541238528&#39;, &#39;0.6419777280140152&#39;, &#39;0.642083406139325&#39;, &#39;0.641456778866585&#39;, &#39;0.6403015094109413&#39;, &#39;0.6390034627608797&#39;, &#39;0.6357107464283921&#39;, &#39;0.6363850700230641&#39;, &#39;0.6421491457194027&#39;, &#39;0.6415748215731398&#39;, &#39;0.6404473736483579&#39;, &#39;0.6425056810123082&#39;, &#39;0.6418751815898204&#39;, &#39;0.6391751710090665&#39;, &#39;0.638102983866446&#39;, &#39;0.6387748511195546&#39;, &#39;0.6384009743368873&#39;, &#39;0.6380828132470923&#39;, &#39;0.6398165514337987&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#39;, &#39;24hVolume&#39;: &#39;75444832&#39;, &#39;btcPrice&#39;: &#39;0.00003321554488758&#39;}, {&#39;uuid&#39;: &#39;KfWtaeV1W&#39;, &#39;symbol&#39;: &#39;FRAX&#39;, &#39;name&#39;: &#39;Frax&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#39;, &#39;marketCap&#39;: &#39;1360673082&#39;, &#39;price&#39;: &#39;1.0000472501636406&#39;, &#39;listedAt&#39;: 1615299931, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.02&#39;, &#39;rank&#39;: 42, &#39;sparkline&#39;: [&#39;0.9989391819857077&#39;, &#39;1.0009133731204434&#39;, &#39;1.0031633981665322&#39;, &#39;1.0056977187005953&#39;, &#39;1.0058075872839434&#39;, &#39;1.0020288398346637&#39;, &#39;1.0036668169977683&#39;, &#39;1.0043383808070452&#39;, &#39;1.0065326733214728&#39;, &#39;1.0043729851007794&#39;, &#39;1.0065805914288182&#39;, &#39;1.0057229836820218&#39;, &#39;1.0023769575278256&#39;, &#39;1.0017713434716538&#39;, &#39;0.9983048754072102&#39;, &#39;0.9980927831854055&#39;, &#39;0.999887038295716&#39;, &#39;0.9991397280499926&#39;, &#39;1.0003422233601573&#39;, &#39;0.9998771859897455&#39;, &#39;0.9998534570977216&#39;, &#39;1.0016770495765326&#39;, &#39;1.0025024941120915&#39;, &#39;1.0016284205087918&#39;, &#39;0.9998701215044888&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#39;, &#39;24hVolume&#39;: &#39;1611210&#39;, &#39;btcPrice&#39;: &#39;0.000051920137862184&#39;}, {&#39;uuid&#39;: &#39;aMNLwaUbY&#39;, &#39;symbol&#39;: &#39;ICP&#39;, &#39;name&#39;: &#39;Internet Computer (DFINITY)&#39;, &#39;color&#39;: &#39;#00042b&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#39;, &#39;marketCap&#39;: &#39;1348809974&#39;, &#39;price&#39;: &#39;5.025647758189688&#39;, &#39;listedAt&#39;: 1601555742, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.31&#39;, &#39;rank&#39;: 43, &#39;sparkline&#39;: [&#39;4.955027568233439&#39;, &#39;4.941284269804198&#39;, &#39;4.9808322932149025&#39;, &#39;5.001991642741683&#39;, &#39;4.975547810095801&#39;, &#39;5.024199400645595&#39;, &#39;5.057382585003378&#39;, &#39;5.041842805118226&#39;, &#39;5.02222002474725&#39;, &#39;5.020346579958754&#39;, &#39;5.006259499033889&#39;, &#39;4.980069401427564&#39;, &#39;4.952420553521131&#39;, &#39;4.958075209735943&#39;, &#39;5.013418584959204&#39;, &#39;5.004524408197972&#39;, &#39;4.998471516666852&#39;, &#39;5.016633269036056&#39;, &#39;4.99678134314195&#39;, &#39;4.978704249316055&#39;, &#39;5.002226191771894&#39;, &#39;5.011735630155115&#39;, &#39;5.005962743230907&#39;, &#39;5.014514875168737&#39;, &#39;5.03579541287081&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#39;, &#39;24hVolume&#39;: &#39;34250505&#39;, &#39;btcPrice&#39;: &#39;0.000260919995939478&#39;}, {&#39;uuid&#39;: &#39;omwkOTglq&#39;, &#39;symbol&#39;: &#39;EGLD&#39;, &#39;name&#39;: &#39;Elrond&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#39;, &#39;marketCap&#39;: &#39;1317989681&#39;, &#39;price&#39;: &#39;55.6622993931249&#39;, &#39;listedAt&#39;: 1612524044, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-1.55&#39;, &#39;rank&#39;: 44, &#39;sparkline&#39;: [&#39;56.289518124266074&#39;, &#39;56.40437469579578&#39;, &#39;56.66902970769358&#39;, &#39;56.850167246711784&#39;, &#39;56.578071852789236&#39;, &#39;56.243945798433614&#39;, &#39;56.48922508372735&#39;, &#39;56.49021794002494&#39;, &#39;56.65725749153038&#39;, &#39;56.7333135823036&#39;, &#39;56.5730183257989&#39;, &#39;56.434012091819326&#39;, &#39;56.237560650681885&#39;, &#39;56.427870447603524&#39;, &#39;56.59512332002992&#39;, &#39;56.41834137851447&#39;, &#39;56.10575389762748&#39;, &#39;55.76412206065055&#39;, &#39;55.76274497602924&#39;, &#39;55.50083961685856&#39;, &#39;55.15257268300208&#39;, &#39;55.46469832123409&#39;, &#39;55.561076102331164&#39;, &#39;55.50960867511326&#39;, &#39;55.68002121442513&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/omwkOTglq+elrond-egld&#39;, &#39;24hVolume&#39;: &#39;39419549&#39;, &#39;btcPrice&#39;: &#39;0.002889857711967399&#39;}, {&#39;uuid&#39;: &#39;Z96jIvLU7&#39;, &#39;symbol&#39;: &#39;IMX&#39;, &#39;name&#39;: &#39;Immutable X&#39;, &#39;color&#39;: &#39;#000000&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#39;, &#39;marketCap&#39;: &#39;1262412447&#39;, &#39;price&#39;: &#39;0.6312062234965121&#39;, &#39;listedAt&#39;: 1649387294, &#39;tier&#39;: 1, &#39;change&#39;: &#39;1.30&#39;, &#39;rank&#39;: 45, &#39;sparkline&#39;: [&#39;0.6242936886161734&#39;, &#39;0.6270560555789536&#39;, &#39;0.6309824428327808&#39;, &#39;0.6319142565992002&#39;, &#39;0.6287912103386641&#39;, &#39;0.6225719666056522&#39;, &#39;0.6258556898082681&#39;, &#39;0.6288913792583651&#39;, &#39;0.6300689393911382&#39;, &#39;0.6309791231332859&#39;, &#39;0.6323316428078244&#39;, &#39;0.6308551833801285&#39;, &#39;0.6280105593506585&#39;, &#39;0.6316877717333391&#39;, &#39;0.6384400201941755&#39;, &#39;0.6372133151258742&#39;, &#39;0.635298636070332&#39;, &#39;0.6351198684550098&#39;, &#39;0.632615426609145&#39;, &#39;0.6290842413969484&#39;, &#39;0.6282243535464536&#39;, &#39;0.6280634603225954&#39;, &#39;0.627992640841501&#39;, &#39;0.6277867735283784&#39;, &#39;0.6303588304816835&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#39;, &#39;24hVolume&#39;: &#39;16505175&#39;, &#39;btcPrice&#39;: &#39;0.000032770765719364&#39;}, {&#39;uuid&#39;: &#39;fsIbGOEJWbzxG&#39;, &#39;symbol&#39;: &#39;XTZ&#39;, &#39;name&#39;: &#39;Tezos&#39;, &#39;color&#39;: &#39;#2c7df7&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#39;, &#39;marketCap&#39;: &#39;1229153522&#39;, &#39;price&#39;: &#39;1.3534152790963805&#39;, &#39;listedAt&#39;: 1530662400, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.71&#39;, &#39;rank&#39;: 46, &#39;sparkline&#39;: [&#39;1.36088792599297&#39;, &#39;1.3599625613124706&#39;, &#39;1.3660795307359193&#39;, &#39;1.3697656577703559&#39;, &#39;1.3637718050677707&#39;, &#39;1.3556400996799705&#39;, &#39;1.3624630048039574&#39;, &#39;1.3629862802502482&#39;, &#39;1.3656361729957383&#39;, &#39;1.3672478499154457&#39;, &#39;1.3656538744657043&#39;, &#39;1.3593145407872822&#39;, &#39;1.3502856166445472&#39;, &#39;1.3506212018955903&#39;, &#39;1.3634878519572404&#39;, &#39;1.3577673877649554&#39;, &#39;1.3521537679171622&#39;, &#39;1.35709373870423&#39;, &#39;1.3558624225519909&#39;, &#39;1.3504999617600535&#39;, &#39;1.349771030342383&#39;, &#39;1.3509329904159706&#39;, &#39;1.3514439959358318&#39;, &#39;1.351255103939454&#39;, &#39;1.354614719273705&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#39;, &#39;24hVolume&#39;: &#39;14199289&#39;, &#39;btcPrice&#39;: &#39;0.000070266187786599&#39;}, {&#39;uuid&#39;: &#39;pxtKbG5rg&#39;, &#39;symbol&#39;: &#39;SAND&#39;, &#39;name&#39;: &#39;The Sandbox&#39;, &#39;color&#39;: &#39;#00adef&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#39;, &#39;marketCap&#39;: &#39;1168501331&#39;, &#39;price&#39;: &#39;0.7770994767371915&#39;, &#39;listedAt&#39;: 1613583024, &#39;tier&#39;: 1, &#39;change&#39;: &#39;0.92&#39;, &#39;rank&#39;: 47, &#39;sparkline&#39;: [&#39;0.7703437492947703&#39;, &#39;0.770724547472596&#39;, &#39;0.7773631847311384&#39;, &#39;0.7809359722516857&#39;, &#39;0.7788705989350532&#39;, &#39;0.776493821488692&#39;, &#39;0.7787347866259375&#39;, &#39;0.7786691031175829&#39;, &#39;0.7809511209049832&#39;, &#39;0.7798671459529274&#39;, &#39;0.7798368135775244&#39;, &#39;0.7792078014422641&#39;, &#39;0.7739419254548766&#39;, &#39;0.7744077208537656&#39;, &#39;0.7817678357526543&#39;, &#39;0.7801006955639823&#39;, &#39;0.7779530021155342&#39;, &#39;0.7797997716469579&#39;, &#39;0.7787781947337461&#39;, &#39;0.7744386380841374&#39;, &#39;0.7746550315521243&#39;, &#39;0.7760920306870871&#39;, &#39;0.7747477205646944&#39;, &#39;0.7749246771421063&#39;, &#39;0.7773016322987929&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#39;, &#39;24hVolume&#39;: &#39;55249202&#39;, &#39;btcPrice&#39;: &#39;0.000040345205647257&#39;}, {&#39;uuid&#39;: &#39;Pe93bIOD2&#39;, &#39;symbol&#39;: &#39;LDO&#39;, &#39;name&#39;: &#39;Lido DAO Token&#39;, &#39;color&#39;: &#39;#77cced&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#39;, &#39;marketCap&#39;: &#39;1133258921&#39;, &#39;price&#39;: &#39;1.4086570686061568&#39;, &#39;listedAt&#39;: 1627361901, &#39;tier&#39;: 1, &#39;change&#39;: &#39;6.26&#39;, &#39;rank&#39;: 48, &#39;sparkline&#39;: [&#39;1.3278091631174658&#39;, &#39;1.3302058863325676&#39;, &#39;1.343310377626516&#39;, &#39;1.3552049746283852&#39;, &#39;1.352154719443742&#39;, &#39;1.3460152591809944&#39;, &#39;1.3544215951529162&#39;, &#39;1.3383044829847262&#39;, &#39;1.3273627218678512&#39;, &#39;1.3301312537567056&#39;, &#39;1.333920535899783&#39;, &#39;1.3331643696587918&#39;, &#39;1.3262615487362415&#39;, &#39;1.328483335443219&#39;, &#39;1.3458301215810708&#39;, &#39;1.3461457397124759&#39;, &#39;1.3434688018752339&#39;, &#39;1.3527690688815122&#39;, &#39;1.3480675050432587&#39;, &#39;1.3449089787725566&#39;, &#39;1.3483425504150819&#39;, &#39;1.3651533256946613&#39;, &#39;1.3714453114375162&#39;, &#39;1.3744657536094196&#39;, &#39;1.3958142183497386&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#39;, &#39;24hVolume&#39;: &#39;20797921&#39;, &#39;btcPrice&#39;: &#39;0.000073134213599011&#39;}, {&#39;uuid&#39;: &#39;GSCt2y6YSgO26&#39;, &#39;symbol&#39;: &#39;CHZ&#39;, &#39;name&#39;: &#39;Chiliz&#39;, &#39;color&#39;: &#39;#d05e72&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#39;, &#39;marketCap&#39;: &#39;1079342424&#39;, &#39;price&#39;: &#39;0.18168078520832928&#39;, &#39;listedAt&#39;: 1562332440, &#39;tier&#39;: 1, &#39;change&#39;: &#39;-0.16&#39;, &#39;rank&#39;: 49, &#39;sparkline&#39;: [&#39;0.1818524323739211&#39;, &#39;0.18227410422280854&#39;, &#39;0.18374744095089926&#39;, &#39;0.18354312511178833&#39;, &#39;0.18200396958247614&#39;, &#39;0.18108281257807454&#39;, &#39;0.18221108239960096&#39;, &#39;0.18205704639631212&#39;, &#39;0.18235585124626988&#39;, &#39;0.1826557485347458&#39;, &#39;0.1823023800680324&#39;, &#39;0.18195889514953517&#39;, &#39;0.180101089814531&#39;, &#39;0.18068361634611435&#39;, &#39;0.18241593153690688&#39;, &#39;0.1819568554869544&#39;, &#39;0.18147988116446626&#39;, &#39;0.18214114901351766&#39;, &#39;0.18174526450515746&#39;, &#39;0.1805493895032667&#39;, &#39;0.1802250878848231&#39;, &#39;0.180013012403102&#39;, &#39;0.18031971543764924&#39;, &#39;0.1803849833425367&#39;, &#39;0.1815054304854962&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#39;, &#39;24hVolume&#39;: &#39;185067825&#39;, &#39;btcPrice&#39;: &#39;0.000009432445730322&#39;}, {&#39;uuid&#39;: &#39;ixgUfzmLR&#39;, &#39;symbol&#39;: &#39;AAVE&#39;, &#39;name&#39;: &#39;Aave&#39;, &#39;color&#39;: &#39;#B6509E&#39;, &#39;iconUrl&#39;: &#39;https://cdn.coinranking.com/4bpYKqV4X/AAVE.png&#39;, &#39;marketCap&#39;: &#39;1075722315&#39;, &#39;price&#39;: &#39;76.17318980208316&#39;, &#39;listedAt&#39;: 1603447311, &#39;tier&#39;: 1, &#39;change&#39;: &#39;3.21&#39;, &#39;rank&#39;: 50, &#39;sparkline&#39;: [&#39;73.61076018338031&#39;, &#39;73.6011277561503&#39;, &#39;74.2351471491496&#39;, &#39;74.75024751810594&#39;, &#39;74.67884333411074&#39;, &#39;73.97670347636331&#39;, &#39;74.05308105084637&#39;, &#39;74.21874745141068&#39;, &#39;74.29216379721927&#39;, &#39;74.3792612011424&#39;, &#39;74.65755863880729&#39;, &#39;74.61707490054222&#39;, &#39;74.29959182958007&#39;, &#39;74.48092054841098&#39;, &#39;75.6529585417904&#39;, &#39;75.63488016917121&#39;, &#39;75.41551331747249&#39;, &#39;75.81453769010096&#39;, &#39;75.83725063098944&#39;, &#39;75.30522099618699&#39;, &#39;75.33539162234749&#39;, &#39;75.48614476135677&#39;, &#39;75.40401192936721&#39;, &#39;75.475762420926&#39;, &#39;76.06706753059751&#39;], &#39;lowVolume&#39;: False, &#39;coinrankingUrl&#39;: &#39;https://coinranking.com/coin/ixgUfzmLR+aave-aave&#39;, &#39;24hVolume&#39;: &#39;92820127&#39;, &#39;btcPrice&#39;: &#39;0.003954735654019633&#39;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 19261.25952935943 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1306.4486927975051 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 0.9993461687488656 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 0.9999694686501251 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 271.51394635832514 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.4679981759837921 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 0.9997076248427321 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.368019149385374 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 30.309772438515694 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.05904075101089855 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge DOT 6.175847367590765 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot MATIC 0.8056199266825756 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic SHIB 0.000010288254400056 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 1.0001348966248338 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06230350664596631 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1311.0409274618196 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.118098383396773 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 15.843421142007257 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax CAKE 4.586317311995357 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake OKB 16.528895354423955 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb ATOM 11.851454713454345 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom LTC 51.51707071608999 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 23.724765611501525 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 23.185196497619483 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 143.6876227076651 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr XLM 0.1130685970054593 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm ALGO 0.3214243614679588 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo BTCB 19213.851903591163 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb CRO 0.10434970048446979 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro BCH 109.92687374233975 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch WEMIX 1.9990802358622086 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix QNT 204.4064498806355 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt ENS 19.767043766007042 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens NEAR 2.9849041203028195 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near LUNC 0.000269929836118739 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc FLOW 1.494015298623054 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow FIL 5.132235061140943 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil VET 0.022805258485620587 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet HBAR 0.06072894691712498 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar HT 6.927245074227631 Icon Url: https://cdn.coinranking.com/ryFpQe0c7/ht.svg Rank Url: https://coinranking.com/coin/DXwP4wF9ksbBO+huobitoken-ht MANA 0.639773230488771 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana FRAX 1.0000472501636406 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax ICP 5.025647758189688 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp EGLD 55.6622993931249 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld IMX 0.6312062234965121 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx XTZ 1.3534152790963805 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz SAND 0.7770994767371915 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.4086570686061568 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo CHZ 0.18168078520832928 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz AAVE 76.17318980208316 Icon Url: https://cdn.coinranking.com/4bpYKqV4X/AAVE.png Rank Url: https://coinranking.com/coin/ixgUfzmLR+aave-aave . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://nicolasmosqueda.github.io/APCSP/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The letter m is the 12 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 1 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) if item == &quot;fries&quot;: total= 1.99 if item == &quot;burger&quot;: total= 3.99 if item == &quot;drink&quot;: total= 0.99 if item == &quot;burger and drink&quot;: total= 4.98 if item == &quot;burger and fries&quot;: total= 5.98 if item == &quot;fries and drink&quot;: total= 2.98 if item == &quot;burger, fries, and drink&quot;: total= 6.97 #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 6.97 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://nicolasmosqueda.github.io/APCSP/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "AP Classroom 1.1-1.3",
            "content": "College Board Quiz . . Reflection . These were very informative questions. It gave me an idea of what to expect on the AP exam. There were certain things that were a bit confusing that I should be sure to review more. A question I have is: What are future tpics that will be crucial to understand? . Unit 1.1 Collaboration Notes . Leanring Objective: Explain how computing innovtions are improved through collaboration . -Benefits of collaborating: Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it . -There are many interpersonal skills that can be learned through collaboration such as: Communication, Consensus Building, Conflict Resolution, and Negotiation . -Pair Programming:Two programmers work together as a pair and while one codes, the other reviews and observes . -Think-Pair-Share: Students think through a problem alone then share ideas with partner and then whole class . Unit 1.2 Program, Function, and Purpose Notes . Learning Objective: Describe the purpose of a computing innovation . -The purpose of computing innovations is to solve problems or to pursue intersts through creative expressions . -An understanding of the purpose of a computing innovation provides developers with an improved ability to develop that computing innovation . Leanring Objectives:Identify inputs to a program and identify outputs produced by a program . -Program inputs are data sent to as computer for processing by a program. Input can come in a variety of forms, such as tactile, audio, visual, or text . -An event is asscoiated with an action and supplies input data to a program . -Events can be generated when a key is pressed, a mouse is clicked, a program is started, or any other defined action occurs that affects the flow of execution . -Inputs usually affect the output produced by a program . -In event driven programming, program statements are executed when triggered, rather than through the sequential flow of control . -Input can come from a user of other programs . -Program outputs are any data sent from a program to a device. Program output can come in a variety of forms, such as tactile, audio, visual, or text . Learning Objective: Explain how a prgram or code segment functions . -A program is a collection of program statements that perfrom a specific task when run by a computer. A program is often reffered to as software . -A code segment is a collection of program statements that is part of a program . -A program needs to work for a variety of inputs and situations . -The behavior or a program functions during the execution and is often described by how a user interacts with it . -A program can be described broadly by what it does, or in more detail by both what the program does and how the program statements accomplish this function . Unit 1.3 Program, Design, and Development Notes . Learning Objective: Develop a program using a development process and design aprogram and its user interface . -A development process can be oriented and intentional or exploratory in nature . -There are multiple development processes, such as:investigating and reflecting, designing, prototyping, testing . Learning Objective: Ackknowledge code segments used from other sources . -It is important ot acknowledge any code segements that were developed collaboratively or by another source . -Acknowledgement of a code segment written by someone else and used in a program can be in program documentation. The acknowledgement should include the orgin or original authors name . Learning Objective: Descirbe the purpose of a code segement or program by writing documentation . -Program documentation is a written description of the function of a cod segment, event, procedure, or program, and how it was developed . -Comments are a form of program documentation written into the program to be read by people, and do not affect how a program runs . -Programmers should document a program throughout its development .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%206/2022/10/02/CollegeBoard.html",
            "relUrl": "/week%206/2022/10/02/CollegeBoard.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Nicolas JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Nicolas&quot;); . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . function logIt(output) { console.log(output); } logIt(msg); . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Group Group.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;classOf&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.group for (var row of compsci.group) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); .",
            "url": "https://nicolasmosqueda.github.io/APCSP/2022/09/26/Javascript.html",
            "relUrl": "/2022/09/26/Javascript.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "HTML Table with Javascript",
            "content": "Scrum Team Roles . . Scrum Team Roles . Team Member Role Grade . Nicolas Mosqueda | Frontend Dev | 12 | . Ben Lee | Dev Ops | 12 | . Kaylee Hou | Scrum Master | 12 | . Trey Blalock | Backend Dev | 12 | . .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%205/2022/09/26/HTML-Table-with-Javascript.html",
            "relUrl": "/week%205/2022/09/26/HTML-Table-with-Javascript.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Program Purpose",
            "content": "Program Purpose . The overall purpose of our project is to demonstrate our groups ability to collaborate and display our coding knowledge through a fun interactive game. Our plan for our project is to make a game which involes the user to go through an escpe room. The user will be able to go through several scenarios which will all lead to different outcomes. We plan to make the game very interactive and enjoyble for the user. We plan to make our game very complex to fulfill the college board requirements and we will make sure we all understand the code and have the ability to explain it. . . 12 Principles of Agile Methodology . Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. | Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage. | Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. | Business people and developers must work together daily throughout the project. | Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. | The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. | Working software is the primary measure of progress. | Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. | Continuous attention to technical excellence and good design enhances agility. | Simplicity–the art of maximizing the amount of work not done–is essential. | The best architectures, requirements, and designs emerge from self-organizing teams. | At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. |",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%205/2022/09/25/Program-Purpose.html",
            "relUrl": "/week%205/2022/09/25/Program-Purpose.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Focus and Habits",
            "content": "Focus and Habits . Nicolas Mosqueda . In the video “Psychology and the Good Life” by Laurie Santos I was able to learn about on how to imporve my quality of life and just how to become happier overall. The main takeaways I got from the video was the importance of expressing gratitude and helping others. . Expressing Gratitude: Santos stressed the importance of being grateful for all the great things we have in life. She explained how doing has proven to make people happier through several studies. I can incorporate this into my life my sitting down for 20 minutes with no distractions and wrting out all the things I am grateful for. . Helping Others: Santos described an experiement in which peolpe were given 5 dollars and some kept the money and spent on themselves while others gave it to others. It was found that the ones who gave the money away were signifianclty more satisfied. This shows that in helping others you are infireclty helping your own happiness. I can incorporate this in my life by making sure to do a random act of kindness week such as giving a homeless person money. . Ben Lee . Laurie Santos gave me lots of insight on how to improve my daily life in the video “Psychology and the Good Life”. Some of the ideas that I think will be the most helpful for me are making time for things other than work and importance of getting proper sleep. . Making time: Santo speaks on how nowadays peolpe get so caught up in work that they dont spend time doing anything else. She explained how this is very bad for our health and we need to make time for other things. I can incorporate this in my life my setting a schedule every week for when I will hangout with my firends and go to the gym so I dont end up spending my entire day doing homework. . Sleep: Santos talked about the importance of sleep and how a lack of sleep can greatly affect a persons happiness. She mentioned a statistic of highschool students getting an average of around 4 hours of sleep per night which is far from the recommneded 8 hours. I can ensure that I get a good nights sleep every night by setting an alarm on my phone to go to bed at a certain time everynight. . .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%204/2022/09/19/Focus-and-Habits.html",
            "relUrl": "/week%204/2022/09/19/Focus-and-Habits.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Performance Task Planning",
            "content": "How I will get 5! . Program Purpose and Function . In order to get this point I will need to really understand what I am doing. In order to do this I need to pause myself when I find myself typing code that I do not really understand. As Bria stated, I can take notes on college board videos and if I need more additional help I can watch Khan Academy as there tons of additional information there . Data Abstraction . It willbe crucial that I spend lots of time on this project and give my best effort so that I have the 2 code segments done to the best of my ability. It is important that my code runs smoothly with no falws . Managing Complexity and Procedural Abstraction . I need to start getting in the habit of not doing the bare minimum when I code. I tend to doubt myslef becasue I am not an experienced coder, but I need to go out of my comfort zone and start experiemnting with more advanced code. I can start by aiming for 3/3 on the weekly grading instead of just getting 2.7/3 . Algorithm Implementation . I need to learn how to be more efficient in my code. Doing this will make me better at learning how to use algorithm so I make the computer do more of the work for me. . Testing . I can practice for this point by starting to make posts explaing my code and what it does. Doing this will make explanations of code for clear so that the person grading my assignmnet can see that I know what i am talking about. . Possible Ideas . I am still unsure of what my project will be, but I am thinking of making a game which challenges the user in a way through questionare, and is also educational. .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%203/2022/09/12/Performance-Task-Planning.html",
            "relUrl": "/week%203/2022/09/12/Performance-Task-Planning.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Baseball Quiz AppLab",
            "content": "Planning/Blogging . I plan to make a quiz about baseball using AppLab on code.org. I want to have 3 multiple chocie questions with 4 answer options. I want the quiz to tell you if you go the question right or wrong immeediately after the question and then give your score as a percentage at the end. . Successes . I was able to make the a working quiz where there was instant feedback after every question on whether the user got hte question right or wrong. Additoinally, the 3 questions ran smoothly and was able to allow the user to retake the questions as many times as desired . Challenges . Some challenegs I ran into was not being able to make the quiz display the score at the end. This was the one thign I was not able to do that was apart of my original plan. I also ran into troubles while making the quiz such as having buttons lead to the wrong the screen. I got stuck fo a little bit when I did not realize that I forgot to include quotation marks for oone of the variables which did not allow the quiz to run. . Discoveries . Prior to this assignment I had no idea how to code.org and AppLab. After creating the quiz and working through several issues I feel a lot more confident using the software. While I understand that this is beginner diffiuclty this will likely help me progress in my computer science journey . Here is a link to my baseball quiz Link .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%203/2022/09/12/Baseball-Quiz-AppLab.html",
            "relUrl": "/week%203/2022/09/12/Baseball-Quiz-AppLab.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Lists, Dictionaries, Iterations",
            "content": "Lists/Dictionaries . Bash Check . toc:true- branch: master | badges: true | comments: true | author: Nicolas Mosqueda | categories: [Week 2] | image: images/chart-preview.png | . # Define an empty List called InfoDb InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Nicolas&quot;, &quot;LastName&quot;: &quot;Mosqueda&quot;, &quot;DOB&quot;: &quot;July 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;nicomosqueda02@gmail.com&quot;, &quot;Cars&quot;: [&quot;2013-Nissan Versa&quot;], &quot;FavoriteFootballPlayers&quot;: [&quot;Josh Allen&quot;, &quot;Patrick Mahomes&quot;, &quot;Russel Wilson&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Ben&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;January 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;benjaminlee@gmail.com&quot;, &quot;Cars&quot;: [&quot;Honda Civic&quot;], &quot;FavoriteFootballPlayers&quot;: [&quot;Tom Brady&quot;, &quot;Patrick Mahomes&quot;, &quot;Dak Prescott&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Nicolas&#39;, &#39;LastName&#39;: &#39;Mosqueda&#39;, &#39;DOB&#39;: &#39;July 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;nicomosqueda02@gmail.com&#39;, &#39;Cars&#39;: [&#39;2013-Nissan Versa&#39;], &#39;FavoriteFootballPlayers&#39;: [&#39;Josh Allen&#39;, &#39;Patrick Mahomes&#39;, &#39;Russel Wilson&#39;]}, {&#39;FirstName&#39;: &#39;Ben&#39;, &#39;LastName&#39;: &#39;Lee&#39;, &#39;DOB&#39;: &#39;January 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;benjaminlee@gmail.com&#39;, &#39;Cars&#39;: [&#39;Honda Civic&#39;], &#39;FavoriteFootballPlayers&#39;: [&#39;Tom Brady&#39;, &#39;Patrick Mahomes&#39;, &#39;Dak Prescott&#39;]}] . # Online Python - IDE, Editor, Compiler, Interpreter # Define an empty List called InfoDb InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Nicolas&quot;, &quot;LastName&quot;: &quot;Mosqueda&quot;, &quot;DOB&quot;: &quot;July 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;nicomosqueda02@gmail.com&quot;, &quot;Cars&quot;: [&quot;2013-Nissan Versa&quot;], &quot;FavoriteFootballPlayers&quot;: [&quot;Josh Allen&quot;, &quot;Patrick Mahomes&quot;, &quot;Russel Wilson&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Ben&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;January 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;benjaminlee@gmail.com&quot;, &quot;Cars&quot;: [&quot;Honda Civic&quot;], &quot;FavoriteFootballPlayers&quot;: [&quot;Tom Brady&quot;, &quot;Patrick Mahomes&quot;, &quot;Dak Prescott&quot;] }) def printInfo(data): print(&quot;FirstName: &quot;, data[&quot;FirstName&quot;]) print(&quot;LastName: &quot;, data[&quot;LastName&quot;]) print(&quot;DOB: &quot;, data[&quot;DOB&quot;]) print(&quot;Residence: &quot;, data[&quot;Residence&quot;]) print(&quot;Email: &quot;, data[&quot;Email&quot;]) print(&quot;FavoriteFootballPlayers: &quot;, data[&quot;FavoriteFootballPlayers&quot;]) # For Loop: for val in InfoDb: printInfo(val) . FirstName: Nicolas LastName: Mosqueda DOB: July 19 Residence: San Diego Email: nicomosqueda02@gmail.com FavoriteFootballPlayers: [&#39;Josh Allen&#39;, &#39;Patrick Mahomes&#39;, &#39;Russel Wilson&#39;] FirstName: Ben LastName: Lee DOB: January 19 Residence: San Diego Email: benjaminlee@gmail.com FavoriteFootballPlayers: [&#39;Tom Brady&#39;, &#39;Patrick Mahomes&#39;, &#39;Dak Prescott&#39;] . for index in range(len(InfoDb)): printInfo(InfoDb[index]) . FirstName: Nicolas LastName: Mosqueda DOB: July 19 Residence: San Diego Email: nicomosqueda02@gmail.com FavoriteFootballPlayers: [&#39;Josh Allen&#39;, &#39;Patrick Mahomes&#39;, &#39;Russel Wilson&#39;] FirstName: Ben LastName: Lee DOB: January 19 Residence: San Diego Email: benjaminlee@gmail.com FavoriteFootballPlayers: [&#39;Tom Brady&#39;, &#39;Patrick Mahomes&#39;, &#39;Dak Prescott&#39;] . index = 0 while index &lt; len(InfoDb): printInfo(InfoDb[index]) index+=1 . FirstName: Nicolas LastName: Mosqueda DOB: July 19 Residence: San Diego Email: nicomosqueda02@gmail.com FavoriteFootballPlayers: [&#39;Josh Allen&#39;, &#39;Patrick Mahomes&#39;, &#39;Russel Wilson&#39;] FirstName: Ben LastName: Lee DOB: January 19 Residence: San Diego Email: benjaminlee@gmail.com FavoriteFootballPlayers: [&#39;Tom Brady&#39;, &#39;Patrick Mahomes&#39;, &#39;Dak Prescott&#39;] . def recursion(i): if i &gt;= len(InfoDb): return printInfo(InfoDb[i]) return recursion(i + 1) recursion(0) . FirstName: Nicolas LastName: Mosqueda DOB: July 19 Residence: San Diego Email: nicomosqueda02@gmail.com FavoriteFootballPlayers: [&#39;Josh Allen&#39;, &#39;Patrick Mahomes&#39;, &#39;Russel Wilson&#39;] FirstName: Ben LastName: Lee DOB: January 19 Residence: San Diego Email: benjaminlee@gmail.com FavoriteFootballPlayers: [&#39;Tom Brady&#39;, &#39;Patrick Mahomes&#39;, &#39;Dak Prescott&#39;] . def new_game(): guesses = [] correct_guesses = 0 question_num = 1 for key in questions: print(&quot;-&quot;) print(key) for i in options[question_num-1]: print(i) guess = input(&quot;Enter (A, B, C, or D): &quot;) guess = guess.upper() guesses.append(guess) correct_guesses += check_answer(questions.get(key),guess) question_num += 1 display_score(correct_guesses, guesses) # - def check_answer(answer, guess): if answer == guess: print(&quot;CORRECT!&quot;) return 1 else: print(&quot;WRONG!&quot;) return 0 # - def display_score(correct_guesses, guesses): print(&quot;-&quot;) print(&quot;RESULTS&quot;) print(&quot;-&quot;) print(&quot;Answers: &quot;, end=&quot;&quot;) for i in questions: print(questions.get(i), end =&quot; &quot;) print() print(&quot;Guesses: &quot;, end=&quot;&quot;) for i in guesses: print(i, end =&quot; &quot;) print() score = int((correct_guesses/len(questions))*100) print(&quot;Your score is: &quot;+str(score)+&quot;%&quot;) # - def play_again(): response = input(&quot;Do you want to play again?: (yes or no): &quot;) response = response.upper() if response == &quot;YES&quot;: return True else: return False # - questions = { &quot;What is the formula (value-mean)/stand deviation used for?: &quot;: &quot;A&quot;, &quot;What is the median of the following sequence of numbers 1,2,5,8,9?: &quot;: &quot;B&quot;, &quot;What is the standard deviation of the following sequence 5,5,15,15 ?: &quot;: &quot;C&quot;, &quot;What is the mean of the following sequence 2,4,6,10,20?: &quot;: &quot;A&quot;, } options = [[&quot;A. Z-score&quot;, &quot;B. mean&quot;, &quot;C. median&quot;, &quot;D. IQR&quot;], [&quot;A. 2&quot;, &quot;B. 5&quot;, &quot;C. 8&quot;, &quot;D. 6&quot;], [&quot;A. 10&quot;, &quot;B. 15&quot;, &quot;C. 5&quot;, &quot;D. 0&quot;], [&quot;A. 8.4&quot;, &quot;B. 10&quot;, &quot;C. 7.6&quot;, &quot;D. 9&quot;]] new_game() while play_again(): new_game() print(&quot;Bye!&quot;) . - What is the formula (value-mean)/stand deviation used for?: A. Z-score B. mean C. median D. IQR CORRECT! - What is the median of the following sequence of numbers 1,2,5,8,9?: A. 2 B. 5 C. 8 D. 6 WRONG! - What is the standard deviation of the following sequence 5,5,15,15 ?: A. 10 B. 15 C. 5 D. 0 WRONG! - What is the mean of the following sequence 2,4,6,10,20?: A. 8.4 B. 10 C. 7.6 D. 9 .",
            "url": "https://nicolasmosqueda.github.io/APCSP/2022/09/05/Lists-Dictionaries-Iteration.html",
            "relUrl": "/2022/09/05/Lists-Dictionaries-Iteration.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "HTML Fragments Changing Theme",
            "content": "HTML Table with Javascript | Program Purpose | JavaScript Tutorial | API | . HTML Fragments Changing Theme . I changed the “remote theme” in config.yml to “moonwalk”, a Jekyll theme. My menu links on top are no longer visible (look at screenshot). For example, the search button and tags button are no longer there. This causes a big problem for users of my website. After seeing this, I went ahead and reverted the theme back to normal. . .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%202/2022/09/05/HTML-Fragments.html",
            "relUrl": "/week%202/2022/09/05/HTML-Fragments.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Computer Science EC Event Reflection",
            "content": "Computer Science EC Event Reflection . During the event today, I was able to gain lots of insight on college and careers in general from the six wonderful speakers. I was able to learn many new things that will definitely help me in my future. I am very grateful that the students were able to take time out of their schedule to share their personal experiences in order to help us. . There were many key takeaways from the students talk. A commonality I found with all of the students was that taking Computer Science was a very interesting experience and it was great in building a strong programming foundation. As they also mentioned that even if you do not decide to major in computer science, the skills learned in the class will still be very helpful for the majority of other majors. For example, one of the students mentioned that on a project for college, his background in computer science helped him save lots of time as he could create a script rather than doing a bunch of manual work. I found all of this very interesting as it made me glad that I took this class as I know that will likely benefit me at some point in my future. This also motivated me to make the most out of this class and try to learn everything that I possibly can. . Another thing that was very helpful was the reassurance that I was given by the students. They mentioned how the computer science space is very competitive and it can be discouraging. They advised to focus on your own path and not worry about what others are doing. I found this very relatable as in the first couple weeks of this computer science class it has become clear that many students are way more experienced than others. Being someone who is very inexperienced, I found this very comforting. I know that if I put in my best effort, everything will work out in the end. . In terms of career and college advice, they said many things I will apply to my future. For example, they talked about making connections and building up your background through different jobs and internships. They largely expressed the importance of building connections and reaching out to people who are in the same field as you. As well as making a Linkedin or Resume to record different jobs or projects that you have worked on. I will make sure that I start doing all of these things to prepare me for my future. I want to be fully prepared for the real world once I leave high school and head on to college and beyond. .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%201/2022/08/29/CS-EC.html",
            "relUrl": "/week%201/2022/08/29/CS-EC.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 6 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What form of government is the United States?&quot;) if rsp == &quot;Representative Democracy&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Who is the Speaker of the House?&quot;) if rsp == &quot;Nancy Pelosi&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many branches of government does the United States have?&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Who controls the Senate right now?&quot;) if rsp == &quot;Nobody&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the name of the branch of Congress where each member serves 2 years?&quot;) if rsp == &quot;House of Representatives&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the name of the government branch that the President works in?&quot;) if rsp == &quot;Executive&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, nicom running c: Users nicom AppData Local Programs Python Python310 python.exe You will be asked 6 questions. Question: Are you ready to take a test? Answer: Question: What form of government is the United States? Representative Democracy is correct! Question: Who is the Speaker of the House? is incorrect! Question: How many branches of government does the United States have? 3 is correct! Question: Who controls the Senate right now? is incorrect! Question: What is the name of the branch of Congress where each member serves 2 years? House of Representatives is correct! Question: What is the name of the government branch that the President works in? is incorrect! nicom you scored 3/6 .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%201/2022/08/28/quiz.html",
            "relUrl": "/week%201/2022/08/28/quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Bash Checks",
            "content": "Bash Check on Jupyter . Bash Check . toc:true- branch: master | badges: true | comments: true | author: Nicolas Mosqueda | categories: [Week 1] | image: images/chart-preview.png | . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/nicolasmosqueda/vscode exists. Directory /home/nicolasmosqueda/vscode/APCSP exists. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . Navigate to project, then navigate to area wwhere files were cloned /home/nicolasmosqueda list top level or root of files with project pulled from github anaconda3 APCSP vscode wsl list again with hidden files pulled from github . .bash_history .gitconfig .node-gyp .wget-hsts .. .bash_logout .ipython .npm wsl anaconda3 .bashrc .jupyter .profile APCSP .cache .landscape .sudo_as_admin_successful .aws .conda .local vscode .azure .docker .motd_shown .vscode-server list all files in long format total 88 drwxr-x 15 nicolasmosqueda nicolasmosqueda 4096 Sep 19 16:30 . drwxr-xr-x 3 root root 4096 Aug 21 23:27 .. drwxr-xr-x 28 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:25 anaconda3 drwxr-xr-x 18 nicolasmosqueda nicolasmosqueda 4096 Aug 23 13:55 APCSP lrwxrwxrwx 1 nicolasmosqueda nicolasmosqueda 23 Sep 19 16:30 .aws -&gt; /mnt/c/Users/nicom/.aws lrwxrwxrwx 1 nicolasmosqueda nicolasmosqueda 25 Sep 19 16:30 .azure -&gt; /mnt/c/Users/nicom/.azure -rw- 1 nicolasmosqueda nicolasmosqueda 3216 Sep 23 14:25 .bash_history -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 220 Jan 6 2022 .bash_logout -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 4286 Sep 14 14:40 .bashrc drwxr-xr-x 7 nicolasmosqueda nicolasmosqueda 4096 Sep 23 14:08 .cache drwxr-xr-x 2 nicolasmosqueda nicolasmosqueda 4096 Sep 14 14:40 .conda drwxr-xr-x 5 nicolasmosqueda nicolasmosqueda 4096 Sep 19 17:34 .docker -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 34 Sep 14 14:28 .gitconfig drwxr-xr-x 3 nicolasmosqueda nicolasmosqueda 4096 Sep 23 14:08 .ipython drwxr-xr-x 2 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:24 .jupyter drwxr-xr-x 2 nicolasmosqueda nicolasmosqueda 4096 Aug 21 23:30 .landscape drwxr-xr-x 5 nicolasmosqueda nicolasmosqueda 4096 Sep 23 14:08 .local -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 0 Sep 25 16:41 .motd_shown drwxr-xr-x 3 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:26 .node-gyp drwxr-xr-x 13 nicolasmosqueda nicolasmosqueda 4096 Sep 23 14:01 .npm -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 807 Jan 6 2022 .profile -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 0 Sep 14 14:42 .sudo_as_admin_successful drwxr-xr-x 3 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:28 vscode drwxr-xr-x 5 nicolasmosqueda nicolasmosqueda 4096 Aug 23 13:52 .vscode-server -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 183 Sep 14 17:28 .wget-hsts -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 0 Sep 14 14:30 wsl . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts bash: cd: /_posts: No such file or directory /home/nicolasmosqueda total 12 drwxr-xr-x 28 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:25 anaconda3 drwxr-xr-x 18 nicolasmosqueda nicolasmosqueda 4096 Aug 23 13:55 APCSP drwxr-xr-x 3 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:28 vscode -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 0 Sep 14 14:30 wsl . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts bash: cd: /_posts: No such file or directory /home/nicolasmosqueda total 12 drwxr-xr-x 28 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:25 anaconda3 drwxr-xr-x 18 nicolasmosqueda nicolasmosqueda 4096 Aug 23 13:55 APCSP drwxr-xr-x 3 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:28 vscode -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 0 Sep 14 14:30 wsl . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . Look for notebooks bash: cd: /_notebooks: No such file or directory /home/nicolasmosqueda total 12 drwxr-xr-x 28 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:25 anaconda3 drwxr-xr-x 18 nicolasmosqueda nicolasmosqueda 4096 Aug 23 13:55 APCSP drwxr-xr-x 3 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:28 vscode -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 0 Sep 14 14:30 wsl . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Look for images in notebooks, print working directory, list files bash: cd: /_notebooks/images: No such file or directory /home/nicolasmosqueda total 12 drwxr-xr-x 28 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:25 anaconda3 drwxr-xr-x 18 nicolasmosqueda nicolasmosqueda 4096 Aug 23 13:55 APCSP drwxr-xr-x 3 nicolasmosqueda nicolasmosqueda 4096 Sep 14 17:28 vscode -rw-r--r-- 1 nicolasmosqueda nicolasmosqueda 0 Sep 14 14:30 wsl . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config .",
            "url": "https://nicolasmosqueda.github.io/APCSP/2022/08/28/bash.html",
            "relUrl": "/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 6 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What form of government is the United States?&quot;) if rsp == &quot;Representative Democracy&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Who is the Speaker of the House?&quot;) if rsp == &quot;Nancy Pelosi&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many branches of government does the United States have?&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Who controls the Senate right now?&quot;) if rsp == &quot;Nobody&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the name of the branch of Congress where each member serves 2 years?&quot;) if rsp == &quot;House of Representatives&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the name of the government branch that the President works in?&quot;) if rsp == &quot;Executive&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, nicom running c: Users nicom AppData Local Programs Python Python310 python.exe You will be asked 6 questions. Question: Are you ready to take a test? Answer: Question: What form of government is the United States? Representative Democracy is correct! Question: Who is the Speaker of the House? is incorrect! Question: How many branches of government does the United States have? 3 is correct! Question: Who controls the Senate right now? is incorrect! Question: What is the name of the branch of Congress where each member serves 2 years? House of Representatives is correct! Question: What is the name of the government branch that the President works in? is incorrect! nicom you scored 3/6 .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%201/2022/08/28/Quiz.html",
            "relUrl": "/week%201/2022/08/28/Quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Ap Gov Notes",
            "content": "Forms of Government . Terms: . Autocracy - A form of government where one person is in charge . Monarchy is a type of autocracy where there is a king or queen and the power stays within the family . | Dictatorship is another form of autocracy where a single person is in control of everything . | . Democracy - A form of government where the power is spread amongst the people . Representative democracy is where the citizens elect people to represent them . | Direct democracy is where every citizen works in making decisions for the government . | . Oligarchy - A form of government where a group of people holds the power . A junta is an example of this as it is a small group of people in power . | . Theocracy - A form of government controlled by religious beliefs . Public Policy . Goals and programs our government creates and implements for society(to create order and take care of people) . | Complicated process- involves various stages and “inputs” . | Inputs: voters, media, special interest groups, politicians . | . Role of Government . What should the government do(National, state, and local) . | Answers vary. Ideas differ . | We do agree on some basic things- limited government, rule of law, democracy . | . Intro to Election Cycle . Voters/Decision Makers- NOT candidates . Party Elite- former or current elected officials, who choose the parties nominees . | Party Leaders-focused on picking the winner, are generally more moderate . | Party activists- ideological . | The Base-reliable voters for a candidate or party . | Electorate- voters . | . Most Americans are moderate voters, that being said the more moderate candidate have a higher chance of being elected . In 1972 McGovern lost by a landslide on the electoral vote because he was very left-leaning, Nixon ended up getting 520 out of 538 votes . | . Incumbent Advantage- candidates who already held office have a great advantage over their opponent . The average voter will likely choose the name they recognize on the ballot . | Candidates who already held office already have staff in place . | They already had a prior run where they gained support from voters . | Previous candidates also have the most money to advertise themsleves from donations and previous campaign, also called a war chest . | .",
            "url": "https://nicolasmosqueda.github.io/APCSP/2022/08/28/AP-Gov-Notes.html",
            "relUrl": "/2022/08/28/AP-Gov-Notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Nicolas's First Jupyter Notebook",
            "content": "print(&quot;Hello&quot;) . Hello . print(&quot;I am very excited to learn about computer science this year&quot;) . I am very excited to learn about computer science this year .",
            "url": "https://nicolasmosqueda.github.io/APCSP/2022/08/21/first-jupyter-notebook.html",
            "relUrl": "/2022/08/21/first-jupyter-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Vocab List",
            "content": "Vocab List . Vocab Explanation . Sequence | multiple steps or lines of code, must be more than one | . Repositry | A repositroy is a place or source where code is stored | . Clone | Cloning code means transferring code from one place to another | . Python | Python is one of the biggest computer programming languages | . Jupyter Notebook | Meant for Python users in order to complete web server completed tasks | . Scrum Master | The scrum master helps to facilitate the sprint by ensuring that an agile framework is followed. He/she is committed to tracking issues and maintaining scrum boards, but should also remain flexible and open to opportunities for the team to improve their workflow. | . DevOps | DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity: version control, integration, managing dependencies (requirements.txt), AWS deployment are some of the key functions that impact velocity. | . Frontend Developer | A front-end developer builds the front-end portion of websites and web applications—that is, the part that users actually see and interact with. | . Backend Developer | Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | . J.son | text-based way of representing JavaScript object literals, arrays, and scalar data | . Agile | Practices like pair programming, planning sessions, sprints… | . Arrays | Stores collection of multiple items under single variable name | .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%201/2022/08/21/Vocab.html",
            "relUrl": "/week%201/2022/08/21/Vocab.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Nicolas's First Post",
            "content": "Nicolas’s First Post . About me . Hello, my name is Nicolas Mosqueda. I am a senior and I like baseball and football. In school, my favorite subjects are math and physics. I am interested in computer science. . I know how to write in bold text, and also in italics. Here’s a list of my favorite baseball players: . Derek Jeter | Aaron Judge | Jorge Alfaro | Mariano Rivera | Mike Trout | Link to my Week 0 Ticket . Here’s my favorite baseball player, Derek Jeter: .",
            "url": "https://nicolasmosqueda.github.io/APCSP/week%200/2022/08/21/Nico-First-Post.html",
            "relUrl": "/week%200/2022/08/21/Nico-First-Post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://nicolasmosqueda.github.io/APCSP/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Notes",
          "content": "AP Gov Notes 1 doc.x . . AP Gov Notes 2 .",
          "url": "https://nicolasmosqueda.github.io/APCSP/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "This is my About Me [^1]. .",
          "url": "https://nicolasmosqueda.github.io/APCSP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  

  
  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nicolasmosqueda.github.io/APCSP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}